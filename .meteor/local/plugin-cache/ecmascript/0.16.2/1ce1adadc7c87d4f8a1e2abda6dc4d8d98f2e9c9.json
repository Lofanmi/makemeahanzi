{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/lib/external/simplify/1.2.2/simplify.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"lib/external/simplify/1.2.2/simplify.js","filename":"/Users/a37/code/github/makemeahanzi-tool/lib/external/simplify/1.2.2/simplify.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/lib/external/simplify/1.2.2/simplify.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/external/simplify/1.2.2/simplify.js"}},"code":"!function (module1) {\n  /*\n   (c) 2013, Vladimir Agafonkin\n   Simplify.js, a high-performance JS polyline simplification library\n   mourner.github.io/simplify-js\n  */\n  this.simplify = function () {\n    'use strict'; // to suit your point format, run search/replace for '.x' and '.y';\n    // for 3D version, see 3d branch (configurability would draw significant performance overhead)\n    // square distance between 2 points\n\n    function getSqDist(p1, p2) {\n      var dx = p1.x - p2.x,\n          dy = p1.y - p2.y;\n      return dx * dx + dy * dy;\n    } // square distance from a point to a segment\n\n\n    function getSqSegDist(p, p1, p2) {\n      var x = p1.x,\n          y = p1.y,\n          dx = p2.x - x,\n          dy = p2.y - y;\n\n      if (dx !== 0 || dy !== 0) {\n        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n          x = p2.x;\n          y = p2.y;\n        } else if (t > 0) {\n          x += dx * t;\n          y += dy * t;\n        }\n      }\n\n      dx = p.x - x;\n      dy = p.y - y;\n      return dx * dx + dy * dy;\n    } // rest of the code doesn't care about point format\n    // basic distance-based simplification\n\n\n    function simplifyRadialDist(points, sqTolerance) {\n      var prevPoint = points[0],\n          newPoints = [prevPoint],\n          point;\n\n      for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n          newPoints.push(point);\n          prevPoint = point;\n        }\n      }\n\n      if (prevPoint !== point) newPoints.push(point);\n      return newPoints;\n    }\n\n    function simplifyDPStep(points, first, last, sqTolerance, simplified) {\n      var maxSqDist = sqTolerance,\n          index;\n\n      for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n          index = i;\n          maxSqDist = sqDist;\n        }\n      }\n\n      if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n      }\n    } // simplification using Ramer-Douglas-Peucker algorithm\n\n\n    function simplifyDouglasPeucker(points, sqTolerance) {\n      var last = points.length - 1;\n      var simplified = [points[0]];\n      simplifyDPStep(points, 0, last, sqTolerance, simplified);\n      simplified.push(points[last]);\n      return simplified;\n    } // both algorithms combined for awesome performance\n\n\n    function simplify(points, tolerance, highestQuality) {\n      if (points.length <= 2) return points;\n      var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n      points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n      points = simplifyDouglasPeucker(points, sqTolerance);\n      return points;\n    } // export as AMD module / Node module / browser or worker variable\n\n\n    if (typeof define === 'function' && define.amd) define(function () {\n      return simplify;\n    });else if (typeof module !== 'undefined') module.exports = simplify;else return simplify;\n  }();\n}.call(this, module);","map":{"version":3,"sources":["lib/external/simplify/1.2.2/simplify.js"],"names":["simplify","getSqDist","p1","p2","dx","x","dy","y","getSqSegDist","p","t","simplifyRadialDist","points","sqTolerance","prevPoint","newPoints","point","i","len","length","push","simplifyDPStep","first","last","simplified","maxSqDist","index","sqDist","simplifyDouglasPeucker","tolerance","highestQuality","undefined","define","amd","module","exports"],"mappings":"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","sourcesContent":["/*\n (c) 2013, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\nthis.simplify = (function () { 'use strict';\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1.x - p2.x,\n        dy = p1.y - p2.y;\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n\n    var x = p1.x,\n        y = p1.y,\n        dx = p2.x - x,\n        dy = p2.y - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2.x;\n            y = p2.y;\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p.x - x;\n    dy = p.y - y;\n\n    return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n\n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n        index;\n\n    for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n            index = i;\n            maxSqDist = sqDist;\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n    var last = points.length - 1;\n\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n\n    return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n\n    if (points.length <= 2) return points;\n\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n\n    return points;\n}\n\n// export as AMD module / Node module / browser or worker variable\nif (typeof define === 'function' && define.amd) define(function() { return simplify; });\nelse if (typeof module !== 'undefined') module.exports = simplify;\nelse return simplify;\n\n})();\n"]},"sourceType":"module","externalDependencies":{},"hash":"1ce1adadc7c87d4f8a1e2abda6dc4d8d98f2e9c9"}
