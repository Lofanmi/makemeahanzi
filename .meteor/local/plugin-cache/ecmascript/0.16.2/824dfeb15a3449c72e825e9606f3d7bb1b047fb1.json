{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/client/lib/analysis.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/analysis.js","filename":"/Users/a37/code/github/makemeahanzi-tool/client/lib/analysis.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/client/lib/analysis.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/analysis.js"}},"code":"module.export({\n  AnalysisStage: () => AnalysisStage\n});\nlet AbstractStage;\nmodule.link(\"/client/lib/abstract\", {\n  AbstractStage(v) {\n    AbstractStage = v;\n  }\n\n}, 0);\nlet assert;\nmodule.link(\"/lib/base\", {\n  assert(v) {\n    assert = v;\n  }\n\n}, 1);\nlet cjklib;\nmodule.link(\"/lib/cjklib\", {\n  cjklib(v) {\n    cjklib = v;\n  }\n\n}, 2);\nlet decomposition_util;\nmodule.link(\"/lib/decomposition_util\", {\n  decomposition_util(v) {\n    decomposition_util = v;\n  }\n\n}, 3);\nlet Glyphs;\nmodule.link(\"/lib/glyphs\", {\n  Glyphs(v) {\n    Glyphs = v;\n  }\n\n}, 4);\nlet pinyin_util;\nmodule.link(\"/lib/pinyin_util\", {\n  pinyin_util(v) {\n    pinyin_util = v;\n  }\n\n}, 5);\nlet stage = undefined;\nconst etymology_fields = ['hint', 'phonetic', 'semantic']; // Methods for querying and modifying decomposition trees.\n\nconst collectComponents = subtree => {\n  return subtree ? decomposition_util.collectComponents(subtree) : [];\n};\n\nconst fixSubtreeChildrenLength = subtree => {\n  const data = decomposition_util.ids_data[subtree.value];\n  assert(data, \"Invalid ideograph description character: \".concat(subtree.value));\n  subtree.children.length = data.arity;\n\n  for (let i = 0; i < subtree.children.length; i++) {\n    subtree.children[i] = subtree.children[i] || {\n      type: 'character',\n      value: '?'\n    };\n    subtree.children[i].path = subtree.path.concat([i]);\n  }\n};\n\nconst setSubtreeType = (subtree, type) => {\n  if (subtree.type === type) {\n    return;\n  }\n\n  if (type === 'character') {\n    subtree.value = '?';\n    delete subtree.children;\n  } else if (type === 'compound') {\n    subtree.value = decomposition_util.ideograph_description_characters[0];\n    subtree.children = [];\n    fixSubtreeChildrenLength(subtree);\n  } else {\n    assert(false, \"Unexpected subtree type: \".concat(type));\n  }\n\n  subtree.type = type;\n}; // Methods for handling updates to various non-decomposition analysis fields.\n\n\nconst updateCharacterValue = (target, text, path) => {\n  const subtree = decomposition_util.getSubtree(stage.tree, path);\n\n  if (text === subtree.value || subtree.type !== 'character') {\n    return;\n  }\n\n  const value = text.length === 1 ? text : '?';\n\n  if (value === subtree.value) {\n    target.text(value);\n  } else {\n    subtree.value = text.length === 1 ? text : '?';\n    stage.forceRefresh();\n  }\n};\n\nconst updateEtymology = (target, text, type) => {\n  let value = text && text !== '?' ? text : undefined;\n  const expansion = ' aptp';\n\n  if (type === 'hint' && value && value.endsWith(expansion)) {\n    const suffix = 'also provides the pronunciation';\n    value = \"\".concat(value.substr(0, value.length - expansion.length), \" \").concat(suffix);\n  }\n\n  if (value === stage.etymology[type]) {\n    target.text(value || '?');\n  } else {\n    stage.etymology[type] = value;\n    stage.forceRefresh();\n  }\n};\n\nconst updateRadicalValue = (target, text) => {\n  const value = text && text !== '?' ? text : undefined;\n\n  if (value === stage.radical) {\n    target.text(value || '?');\n  } else {\n    stage.radical = value;\n    stage.forceRefresh();\n  }\n}; // Methods for initializing different fields of the analysis.\n\n\nconst initializeDecompositionTree = (analysis, character) => {\n  const data = cjklib.getCharacterData(character);\n  return decomposition_util.convertDecompositionToTree(analysis.decomposition || data.decomposition);\n};\n\nconst initializeRadical = (character, components) => {\n  if (cjklib.radicals.radical_to_index_map.hasOwnProperty(character)) {\n    return character;\n  }\n\n  const data = cjklib.getCharacterData(character);\n\n  if (data.kangxi_index) {\n    const index = data.kangxi_index[0];\n    const radicals = cjklib.radicals.index_to_radical_map[index];\n    const included = radicals.filter(x => components.indexOf(x) >= 0);\n    return included.length === 1 ? included[0] : radicals.join('');\n  }\n\n  return undefined;\n};\n\nconst initializeEtymology = (glyph, components) => {\n  const data = cjklib.getCharacterData(glyph.character);\n  const target = pinyin_util.dropTones(glyph.metadata.pinyin || data.pinyin || '');\n\n  const phonetic_match = component => {\n    const component_data = cjklib.getCharacterData(component);\n    const attempt = pinyin_util.dropTones(component_data.pinyin || '');\n    return attempt && attempt === target;\n  };\n\n  const phonetic = components.filter(phonetic_match);\n\n  if (phonetic.length === 1) {\n    const result = {\n      type: 'pictophonetic',\n      phonetic: phonetic[0]\n    };\n    const semantic = components.filter(x => !phonetic_match(x));\n\n    if (semantic.length === 1) {\n      result.semantic = semantic[0];\n    }\n\n    return result;\n  }\n\n  return {\n    type: 'ideographic'\n  };\n}; // Methods for automatically inferring a phonetic-semantic decomposition.\n\n\nconst doubleAlphabeticCharacters = pinyin => {\n  const numbered = pinyin_util.tonePinyinToNumberedPinyin(pinyin);\n  return Array.from(numbered).map(x => /[a-z]/.test(x) ? x + x : x).join('');\n};\n\nconst guessPhoneticAndSemanticComponents = (glyph, components) => {\n  const data = cjklib.getCharacterData(glyph.character);\n  const target = doubleAlphabeticCharacters(glyph.metadata.pinyin || data.pinyin || '');\n\n  const distance = component => {\n    const component_data = cjklib.getCharacterData(component);\n    const attempt = doubleAlphabeticCharacters(component_data.pinyin || '');\n    return s.levenshtein(attempt, target);\n  };\n\n  const pairs = components.map(x => [x, distance(x)]);\n  const sorted = pairs.sort((a, b) => a[1] - b[1]).map(x => x[0]);\n  const result = {};\n\n  if (sorted.length > 0) {\n    result.phonetic = sorted[0];\n\n    if (sorted.length === 2) {\n      result.semantic = sorted[1];\n    }\n  }\n\n  return result;\n};\n\nclass AnalysisStage extends AbstractStage {\n  constructor(glyph) {\n    super('analysis');\n    this.strokes = glyph.stages.strokes.corrected;\n    const analysis = glyph.stages.analysis || {};\n    this.tree = initializeDecompositionTree(analysis, glyph.character);\n    const components = collectComponents(this.tree);\n    this.radical = analysis.radical || initializeRadical(glyph.character, components);\n    this.etymology = analysis.etymology || initializeEtymology(glyph, components);\n    this.simplified = cjklib.getCharacterData(glyph.character).simplified;\n    stage = this;\n    updateStatus();\n  }\n\n  clearLaterStages(output1, output2) {\n    return output1.decomposition !== output2.decomposition;\n  }\n\n  getStageOutput() {\n    return {\n      decomposition: decomposition_util.convertTreeToDecomposition(this.tree),\n      etymology: _.extend({}, this.etymology),\n      radical: this.radical\n    };\n  }\n\n  refreshUI() {\n    const to_path = x => ({\n      d: x,\n      fill: 'gray',\n      stroke: 'gray'\n    });\n\n    Session.set('stage.paths', this.strokes.map(to_path));\n    Session.set('stages.analysis.tree', this.tree);\n    Session.set('stages.analysis.radical', this.radical);\n    Session.set('stages.analysis.etymology', this.etymology);\n    Session.set('stages.analysis.simplified', this.simplified);\n  }\n\n}\n\nTemplate.analysis_stage.events({\n  'blur .value': function (event) {\n    // This line is not needed for correctness, so we ignore any errors in it.\n    try {\n      window.getSelection().removeAllRanges();\n    } catch (e) {}\n\n    const target = $(event.target);\n    const field = target.attr('data-field');\n    const text = target.text();\n\n    if (field === 'character') {\n      updateCharacterValue(target, text, this.path);\n    } else if (field === 'radical') {\n      updateRadicalValue(target, text);\n    } else if (etymology_fields.indexOf(field) >= 0) {\n      updateEtymology(target, text, field);\n    } else {\n      assert(false, \"Unexpected editable field: \".concat(field));\n    }\n  },\n  'change .compound-type': function (event) {\n    const type = $(event.target).val();\n    const subtree = decomposition_util.getSubtree(stage.tree, this.path);\n\n    if (type === subtree.value || subtree.type != 'compound') {\n      return;\n    }\n\n    subtree.value = type;\n    fixSubtreeChildrenLength(subtree);\n    stage.forceRefresh();\n  },\n  'change .etymology-type': function (event) {\n    const type = $(event.target).val();\n    etymology_fields.map(x => {\n      if (x !== 'hint') delete stage.etymology[x];\n    });\n\n    if (type === 'pictophonetic' !== (stage.etymology.type === 'pictophonetic')) {\n      delete stage.etymology.hint;\n    }\n\n    stage.etymology.type = type;\n\n    if (type === 'pictophonetic') {\n      _.extend(stage.etymology, guessPhoneticAndSemanticComponents(Session.get('editor.glyph'), collectComponents(stage.tree)));\n    }\n\n    stage.forceRefresh();\n  },\n  'change .subtree-type': function (event) {\n    const type = $(event.target).val();\n    const subtree = decomposition_util.getSubtree(stage.tree, this.path);\n    setSubtreeType(subtree, type);\n    stage.forceRefresh();\n  }\n});\nTemplate.analysis_stage.helpers({\n  decomposition_data: () => {\n    return Session.get('stages.analysis.tree');\n  },\n  etymology_data: () => {\n    const result = Session.get('stages.analysis.etymology') || {};\n    result.hint = result.hint || '?';\n\n    if (result.type === 'pictophonetic') {\n      result.phonetic = result.phonetic || '?';\n      result.semantic = result.semantic || '?';\n    }\n\n    return result;\n  },\n  radical: () => {\n    return Session.get('stages.analysis.radical') || '?';\n  }\n});\nTemplate.tree.helpers({\n  compounds: value => {\n    return decomposition_util.ideograph_description_characters.map(x => ({\n      compound: x,\n      label: \"\".concat(x, \" - \").concat(decomposition_util.ids_data[x].label),\n      value: value\n    }));\n  },\n  details: character => {\n    const glyph = Glyphs.get(character);\n    const data = cjklib.getCharacterData(character);\n    let definition = glyph.metadata.definition || data.definition;\n    let pinyin = glyph.metadata.pinyin || data.pinyin;\n    let radical = '';\n\n    if (cjklib.radicals.radical_to_index_map.hasOwnProperty(character)) {\n      const index = cjklib.radicals.radical_to_index_map[character];\n      const primary = cjklib.radicals.primary_radical[index];\n      const variant = primary !== character;\n      radical = \"; \".concat(variant ? 'variant of ' : '') + \"Kangxi radical \".concat(index, \" \").concat(variant ? primary : '');\n\n      if (variant && Glyphs.get(primary)) {\n        const glyph = Glyphs.get(primary);\n        const data = cjklib.getCharacterData(primary);\n        definition = definition || glyph.definition || data.definition;\n        pinyin = pinyin || glyph.pinyin || data.pinyin;\n      }\n    }\n\n    definition = definition || '(unknown)';\n    return \"\".concat(pinyin ? pinyin + ' - ' : '').concat(definition).concat(radical);\n  }\n});\n\nconst traditionalEtymologyHack = () => {\n  // Only compute the traditional etymology based on simplified once, and only\n  // if this character does not already have an etymology computed.\n  if (!stage || !stage.simplified || stage.inferred_etymology_from_simplified_form) {\n    return;\n  }\n\n  const glyph = Session.get('editor.glyph');\n  const simplified = Glyphs.findOne({\n    character: stage.simplified\n  });\n\n  if (!glyph || !simplified) {\n    return;\n  }\n\n  stage.inferred_etymology_from_simplified_form = true;\n\n  if (glyph.stages.analysis && glyph.stages.analysis.etymology && glyph.stages.analysis.etymology.hint || !(simplified.stages.analysis && simplified.stages.analysis.etymology && simplified.stages.analysis.etymology.hint)) {\n    return;\n  } // Try to pull components for the simplified character up to components for\n  // the traditional character.\n\n\n  const mapping = {};\n  const analysis = simplified.stages.analysis;\n  const decomposition = decomposition_util.convertTreeToDecomposition(stage.tree);\n\n  if (decomposition.length === analysis.decomposition.length && decomposition[0] === analysis.decomposition[0]) {\n    for (let i = 0; i < decomposition.length; i++) {\n      mapping[analysis.decomposition[i]] = decomposition[i];\n    }\n  } else {\n    return;\n  } // Pull the actual etymology.\n\n\n  stage.etymology = {};\n\n  for (let key of _.keys(analysis.etymology)) {\n    const value = analysis.etymology[key];\n    stage.etymology[key] = key === 'type' ? value : value.applyMapping(mapping);\n  }\n\n  stage.forceRefresh();\n};\n\nconst updateStatus = () => {\n  const components = collectComponents(Session.get('stages.analysis.tree'));\n\n  if (Session.get('stages.analysis.simplified')) {\n    components.push(Session.get('stages.analysis.simplified'));\n  }\n\n  const radical = Session.get('stages.analysis.radical');\n  const missing = components.filter(x => {\n    const glyph = Glyphs.findOne({\n      character: x\n    });\n    return !glyph || !glyph.stages.verified;\n  });\n  const log = [];\n\n  if (missing.length === 0) {\n    log.push({\n      cls: 'success',\n      message: 'All components ready.'\n    });\n    Meteor.setTimeout(traditionalEtymologyHack, 0);\n  } else {\n    const error = \"Incomplete components: \".concat(missing.join(' '));\n    log.push({\n      cls: 'error',\n      message: error\n    });\n  }\n\n  if (!radical || radical.length === 0) {\n    log.push({\n      cls: 'error',\n      message: 'No radical selected.'\n    });\n  } else if (radical.length > 1) {\n    log.push({\n      cls: 'error',\n      message: 'Multiple radicals selected.'\n    });\n  } else if (components.indexOf(radical) >= 0) {\n    log.push({\n      cls: 'success',\n      message: \"Radical \".concat(radical, \" found in decomposition.\")\n    });\n  }\n\n  const nonradicals = Array.from(radical || '').filter(x => !cjklib.radicals.radical_to_index_map.hasOwnProperty(x));\n\n  if (nonradicals.length > 0) {\n    log.push({\n      cls: 'error',\n      message: 'Radical field includes non-radicals: ' + nonradicals.join(' ')\n    });\n  }\n\n  if (Session.get('stage.type') === 'analysis') {\n    Session.set('stage.status', log);\n  }\n}; // We need to add the setTimeout here because client/lib is loaded before lib.\n// TODO(skishore): Find a better way to handle this load-order issue.\n\n\nMeteor.startup(() => Meteor.setTimeout(() => {\n  Tracker.autorun(updateStatus);\n  cjklib.promise.then(() => Tracker.autorun(() => {\n    const components = collectComponents(Session.get('stages.analysis.tree'));\n\n    if (Session.get('stages.analysis.simplified')) {\n      components.push(Session.get('stages.analysis.simplified'));\n    }\n\n    for (let component of [].concat(components)) {\n      if (cjklib.radicals.radical_to_index_map.hasOwnProperty(component)) {\n        const index = cjklib.radicals.radical_to_index_map[component];\n        const primary = cjklib.radicals.primary_radical[index];\n\n        if (primary !== component) {\n          components.push(primary);\n        }\n      }\n    }\n\n    Meteor.subscribe('getAllGlyphs', components);\n  })).catch(console.error.bind(console));\n}, 0));","map":{"version":3,"sources":["client/lib/analysis.js"],"names":["module","export","AnalysisStage","AbstractStage","link","v","assert","cjklib","decomposition_util","Glyphs","pinyin_util","stage","undefined","etymology_fields","collectComponents","subtree","fixSubtreeChildrenLength","data","ids_data","value","children","length","arity","i","type","path","concat","setSubtreeType","ideograph_description_characters","updateCharacterValue","target","text","getSubtree","tree","forceRefresh","updateEtymology","expansion","endsWith","suffix","substr","etymology","updateRadicalValue","radical","initializeDecompositionTree","analysis","character","getCharacterData","convertDecompositionToTree","decomposition","initializeRadical","components","radicals","radical_to_index_map","hasOwnProperty","kangxi_index","index","index_to_radical_map","included","filter","x","indexOf","join","initializeEtymology","glyph","dropTones","metadata","pinyin","phonetic_match","component","component_data","attempt","phonetic","result","semantic","doubleAlphabeticCharacters","numbered","tonePinyinToNumberedPinyin","Array","from","map","test","guessPhoneticAndSemanticComponents","distance","s","levenshtein","pairs","sorted","sort","a","b","constructor","strokes","stages","corrected","simplified","updateStatus","clearLaterStages","output1","output2","getStageOutput","convertTreeToDecomposition","_","extend","refreshUI","to_path","d","fill","stroke","Session","set","Template","analysis_stage","events","event","window","getSelection","removeAllRanges","e","$","field","attr","val","hint","get","helpers","decomposition_data","etymology_data","compounds","compound","label","details","definition","primary","primary_radical","variant","traditionalEtymologyHack","inferred_etymology_from_simplified_form","findOne","mapping","key","keys","applyMapping","push","missing","verified","log","cls","message","Meteor","setTimeout","error","nonradicals","startup","Tracker","autorun","promise","then","subscribe","catch","console","bind"],"mappings":"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","sourcesContent":["import {AbstractStage} from '/client/lib/abstract';\nimport {assert} from '/lib/base';\nimport {cjklib} from '/lib/cjklib';\nimport {decomposition_util} from '/lib/decomposition_util';\nimport {Glyphs} from '/lib/glyphs';\nimport {pinyin_util} from '/lib/pinyin_util';\n\nlet stage = undefined;\n\nconst etymology_fields = ['hint', 'phonetic', 'semantic']\n\n// Methods for querying and modifying decomposition trees.\n\nconst collectComponents = (subtree) => {\n  return subtree ? decomposition_util.collectComponents(subtree) : [];\n}\n\nconst fixSubtreeChildrenLength = (subtree) => {\n  const data = decomposition_util.ids_data[subtree.value];\n  assert(data, `Invalid ideograph description character: ${subtree.value}`);\n  subtree.children.length = data.arity;\n  for (let i = 0; i < subtree.children.length; i++) {\n    subtree.children[i] =\n        subtree.children[i] || {type: 'character', value: '?'};\n    subtree.children[i].path = subtree.path.concat([i]);\n  }\n}\n\nconst setSubtreeType = (subtree, type) => {\n  if (subtree.type === type) {\n    return;\n  }\n  if (type === 'character') {\n    subtree.value = '?';\n    delete subtree.children;\n  } else if (type === 'compound') {\n    subtree.value = decomposition_util.ideograph_description_characters[0];\n    subtree.children = [];\n    fixSubtreeChildrenLength(subtree);\n  } else {\n    assert(false, `Unexpected subtree type: ${type}`);\n  }\n  subtree.type = type;\n}\n\n// Methods for handling updates to various non-decomposition analysis fields.\n\nconst updateCharacterValue = (target, text, path) => {\n  const subtree = decomposition_util.getSubtree(stage.tree, path);\n  if (text === subtree.value || subtree.type !== 'character') {\n    return;\n  }\n  const value = text.length === 1 ? text : '?';\n  if (value === subtree.value) {\n    target.text(value);\n  } else {\n    subtree.value = text.length === 1 ? text : '?';\n    stage.forceRefresh();\n  }\n}\n\nconst updateEtymology = (target, text, type) => {\n  let value = text && text !== '?' ? text : undefined;\n  const expansion = ' aptp';\n  if (type === 'hint' && value && value.endsWith(expansion)) {\n    const suffix = 'also provides the pronunciation'\n    value = `${value.substr(0, value.length - expansion.length)} ${suffix}`;\n  }\n  if (value === stage.etymology[type]) {\n    target.text(value || '?');\n  } else {\n    stage.etymology[type] = value;\n    stage.forceRefresh();\n  }\n}\n\nconst updateRadicalValue = (target, text) => {\n  const value = text && text !== '?' ? text : undefined;\n  if (value === stage.radical) {\n    target.text(value || '?');\n  } else {\n    stage.radical = value;\n    stage.forceRefresh();\n  }\n}\n\n// Methods for initializing different fields of the analysis.\n\nconst initializeDecompositionTree = (analysis, character) => {\n  const data = cjklib.getCharacterData(character);\n  return decomposition_util.convertDecompositionToTree(\n      analysis.decomposition || data.decomposition);\n}\n\nconst initializeRadical = (character, components) => {\n  if (cjklib.radicals.radical_to_index_map.hasOwnProperty(character)) {\n    return character;\n  }\n  const data = cjklib.getCharacterData(character);\n  if (data.kangxi_index) {\n    const index = data.kangxi_index[0];\n    const radicals = cjklib.radicals.index_to_radical_map[index];\n    const included = radicals.filter((x) => components.indexOf(x) >= 0);\n    return included.length === 1 ? included[0] : radicals.join('');\n  }\n  return undefined;\n}\n\nconst initializeEtymology = (glyph, components) => {\n  const data = cjklib.getCharacterData(glyph.character);\n  const target = pinyin_util.dropTones(\n      glyph.metadata.pinyin || data.pinyin || '');\n  const phonetic_match = (component) => {\n    const component_data = cjklib.getCharacterData(component);\n    const attempt = pinyin_util.dropTones(component_data.pinyin || '');\n    return attempt && attempt === target;\n  }\n  const phonetic = components.filter(phonetic_match);\n  if (phonetic.length === 1) {\n    const result = {type: 'pictophonetic', phonetic: phonetic[0]};\n    const semantic = components.filter((x) => !phonetic_match(x));\n    if (semantic.length === 1) {\n      result.semantic = semantic[0];\n    }\n    return result;\n  }\n  return {type: 'ideographic'};\n}\n\n// Methods for automatically inferring a phonetic-semantic decomposition.\n\nconst doubleAlphabeticCharacters = (pinyin) => {\n  const numbered = pinyin_util.tonePinyinToNumberedPinyin(pinyin);\n  return Array.from(numbered).map((x) => /[a-z]/.test(x) ? x + x : x).join('');\n}\n\nconst guessPhoneticAndSemanticComponents = (glyph, components) => {\n  const data = cjklib.getCharacterData(glyph.character);\n  const target = doubleAlphabeticCharacters(\n      glyph.metadata.pinyin || data.pinyin || '');\n  const distance = (component) => {\n    const component_data = cjklib.getCharacterData(component);\n    const attempt = doubleAlphabeticCharacters(component_data.pinyin || '');\n    return s.levenshtein(attempt, target);\n  }\n  const pairs = components.map((x) => [x, distance(x)]);\n  const sorted = pairs.sort((a, b) => a[1] - b[1]).map((x) => x[0]);\n  const result = {};\n  if (sorted.length > 0) {\n    result.phonetic = sorted[0];\n    if (sorted.length === 2) {\n      result.semantic = sorted[1];\n    }\n  }\n  return result;\n}\n\nclass AnalysisStage extends AbstractStage {\n  constructor(glyph) {\n    super('analysis');\n    this.strokes = glyph.stages.strokes.corrected;\n    const analysis = glyph.stages.analysis || {};\n    this.tree = initializeDecompositionTree(analysis, glyph.character);\n    const components = collectComponents(this.tree);\n    this.radical = analysis.radical ||\n                   initializeRadical(glyph.character, components);\n    this.etymology = analysis.etymology ||\n                     initializeEtymology(glyph, components);\n    this.simplified = cjklib.getCharacterData(glyph.character).simplified;\n    stage = this;\n    updateStatus();\n  }\n  clearLaterStages(output1, output2) {\n    return output1.decomposition !== output2.decomposition;\n  }\n  getStageOutput() {\n    return {\n      decomposition: decomposition_util.convertTreeToDecomposition(this.tree),\n      etymology: _.extend({}, this.etymology),\n      radical: this.radical,\n    }\n  }\n  refreshUI() {\n    const to_path = (x) => ({d: x, fill: 'gray', stroke: 'gray'});\n    Session.set('stage.paths', this.strokes.map(to_path));\n    Session.set('stages.analysis.tree', this.tree);\n    Session.set('stages.analysis.radical', this.radical);\n    Session.set('stages.analysis.etymology', this.etymology);\n    Session.set('stages.analysis.simplified', this.simplified);\n  }\n}\n\nTemplate.analysis_stage.events({\n  'blur .value': function(event) {\n    // This line is not needed for correctness, so we ignore any errors in it.\n    try { window.getSelection().removeAllRanges(); } catch (e) { }\n    const target = $(event.target);\n    const field = target.attr('data-field');\n    const text = target.text();\n    if (field === 'character') {\n      updateCharacterValue(target, text, this.path);\n    } else if (field === 'radical') {\n      updateRadicalValue(target, text);\n    } else if (etymology_fields.indexOf(field) >= 0) {\n      updateEtymology(target, text, field);\n    } else {\n      assert(false, `Unexpected editable field: ${field}`);\n    }\n  },\n  'change .compound-type': function(event) {\n    const type = $(event.target).val();\n    const subtree = decomposition_util.getSubtree(stage.tree, this.path);\n    if (type === subtree.value || subtree.type != 'compound') {\n      return;\n    }\n    subtree.value = type;\n    fixSubtreeChildrenLength(subtree);\n    stage.forceRefresh();\n  },\n  'change .etymology-type': function(event) {\n    const type = $(event.target).val();\n    etymology_fields.map(\n        (x) => { if (x !== 'hint') delete stage.etymology[x]; });\n    if ((type === 'pictophonetic') !==\n        (stage.etymology.type === 'pictophonetic')) {\n      delete stage.etymology.hint;\n    }\n    stage.etymology.type = type;\n    if (type === 'pictophonetic') {\n      _.extend(stage.etymology, guessPhoneticAndSemanticComponents(\n          Session.get('editor.glyph'), collectComponents(stage.tree)));\n    }\n    stage.forceRefresh();\n  },\n  'change .subtree-type': function(event) {\n    const type = $(event.target).val();\n    const subtree = decomposition_util.getSubtree(stage.tree, this.path);\n    setSubtreeType(subtree, type);\n    stage.forceRefresh();\n  },\n});\n\nTemplate.analysis_stage.helpers({\n  decomposition_data: () => {\n    return Session.get('stages.analysis.tree');\n  },\n  etymology_data: () => {\n    const result = Session.get('stages.analysis.etymology') || {};\n    result.hint = result.hint || '?';\n    if (result.type === 'pictophonetic') {\n      result.phonetic = result.phonetic || '?';\n      result.semantic = result.semantic || '?';\n    }\n    return result;\n  },\n  radical: () => {\n    return Session.get('stages.analysis.radical') || '?';\n  },\n});\n\nTemplate.tree.helpers({\n  compounds: (value) => {\n    return decomposition_util.ideograph_description_characters.map( (x) => ({\n      compound: x,\n      label: `${x} - ${decomposition_util.ids_data[x].label}`,\n      value: value,\n    }));\n  },\n  details: (character) => {\n    const glyph = Glyphs.get(character);\n    const data = cjklib.getCharacterData(character);\n    let definition = glyph.metadata.definition || data.definition;\n    let pinyin = glyph.metadata.pinyin || data.pinyin;\n    let radical = '';\n    if (cjklib.radicals.radical_to_index_map.hasOwnProperty(character)) {\n      const index = cjklib.radicals.radical_to_index_map[character];\n      const primary = cjklib.radicals.primary_radical[index];\n      const variant = primary !== character;\n      radical = `; ${variant ? 'variant of ' : ''}` +\n                `Kangxi radical ${index} ${variant ? primary : ''}`;\n      if (variant && Glyphs.get(primary)) {\n        const glyph = Glyphs.get(primary);\n        const data = cjklib.getCharacterData(primary);\n        definition = definition || glyph.definition || data.definition;\n        pinyin = pinyin || glyph.pinyin || data.pinyin;\n      }\n    }\n    definition = definition || '(unknown)';\n    return `${pinyin ? pinyin + ' - ' : ''}${definition}${radical}`;\n  },\n});\n\nconst traditionalEtymologyHack = () => {\n  // Only compute the traditional etymology based on simplified once, and only\n  // if this character does not already have an etymology computed.\n  if (!stage || !stage.simplified ||\n      stage.inferred_etymology_from_simplified_form) {\n    return;\n  }\n  const glyph = Session.get('editor.glyph');\n  const simplified = Glyphs.findOne({character: stage.simplified});\n  if (!glyph || !simplified) {\n    return;\n  }\n  stage.inferred_etymology_from_simplified_form = true;\n  if ((glyph.stages.analysis && glyph.stages.analysis.etymology &&\n       glyph.stages.analysis.etymology.hint) ||\n      !(simplified.stages.analysis && simplified.stages.analysis.etymology &&\n        simplified.stages.analysis.etymology.hint)) {\n    return;\n  }\n  // Try to pull components for the simplified character up to components for\n  // the traditional character.\n  const mapping = {};\n  const analysis = simplified.stages.analysis;\n  const decomposition =\n      decomposition_util.convertTreeToDecomposition(stage.tree);\n  if (decomposition.length === analysis.decomposition.length &&\n      decomposition[0] === analysis.decomposition[0]) {\n    for (let i = 0; i < decomposition.length; i++) {\n      mapping[analysis.decomposition[i]] = decomposition[i];\n    }\n  } else {\n    return;\n  }\n  // Pull the actual etymology.\n  stage.etymology = {};\n  for (let key of _.keys(analysis.etymology)) {\n    const value = analysis.etymology[key];\n    stage.etymology[key] = key === 'type' ? value : value.applyMapping(mapping);\n  }\n  stage.forceRefresh();\n}\n\nconst updateStatus = () => {\n  const components = collectComponents(Session.get('stages.analysis.tree'));\n  if (Session.get('stages.analysis.simplified')) {\n    components.push(Session.get('stages.analysis.simplified'));\n  }\n  const radical = Session.get('stages.analysis.radical');\n  const missing = components.filter((x) => {\n    const glyph = Glyphs.findOne({character: x});\n    return !glyph || !glyph.stages.verified;\n  });\n  const log = [];\n  if (missing.length === 0) {\n    log.push({cls: 'success', message: 'All components ready.'});\n    Meteor.setTimeout(traditionalEtymologyHack, 0);\n  } else {\n    const error = `Incomplete components: ${missing.join(' ')}`;\n    log.push({cls: 'error', message: error});\n  }\n  if (!radical || radical.length === 0) {\n    log.push({cls: 'error', message: 'No radical selected.'});\n  } else if (radical.length > 1) {\n    log.push({cls: 'error', message: 'Multiple radicals selected.'});\n  } else if (components.indexOf(radical) >= 0) {\n    log.push({cls: 'success',\n              message: `Radical ${radical} found in decomposition.`});\n  }\n  const nonradicals = (Array.from(radical || '')).filter(\n      (x) => !cjklib.radicals.radical_to_index_map.hasOwnProperty(x));\n  if (nonradicals.length > 0) {\n    log.push({cls: 'error', message: 'Radical field includes non-radicals: ' +\n                                     nonradicals.join(' ')});\n  }\n  if (Session.get('stage.type') === 'analysis') {\n    Session.set('stage.status', log);\n  }\n}\n\n// We need to add the setTimeout here because client/lib is loaded before lib.\n// TODO(skishore): Find a better way to handle this load-order issue.\nMeteor.startup(() => Meteor.setTimeout(() => {\n  Tracker.autorun(updateStatus);\n  cjklib.promise.then(() => Tracker.autorun(() => {\n    const components = collectComponents(Session.get('stages.analysis.tree'));\n    if (Session.get('stages.analysis.simplified')) {\n      components.push(Session.get('stages.analysis.simplified'));\n    }\n    for (let component of [].concat(components)) {\n      if (cjklib.radicals.radical_to_index_map.hasOwnProperty(component)) {\n        const index = cjklib.radicals.radical_to_index_map[component];\n        const primary = cjklib.radicals.primary_radical[index]\n        if (primary !== component) {\n          components.push(primary);\n        }\n      }\n    }\n    Meteor.subscribe('getAllGlyphs', components);\n  })).catch(console.error.bind(console));\n}, 0));\n\nexport {AnalysisStage};\n"]},"sourceType":"module","externalDependencies":{},"hash":"824dfeb15a3449c72e825e9606f3d7bb1b047fb1"}
