{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/lib/median_util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"lib/median_util.js","filename":"/Users/a37/code/github/makemeahanzi-tool/lib/median_util.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/lib/median_util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/median_util.js"}},"code":"var _createForOfIteratorHelperLoose;\n\nmodule.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n  default: function (v) {\n    _createForOfIteratorHelperLoose = v;\n  }\n}, 0);\nmodule.export({\n  median_util: function () {\n    return median_util;\n  }\n});\nvar simplify;\nmodule.link(\"/lib/external/simplify/1.2.2/simplify\", {\n  \"default\": function (v) {\n    simplify = v;\n  }\n}, 0);\nvar assert, Point;\nmodule.link(\"/lib/base\", {\n  assert: function (v) {\n    assert = v;\n  },\n  Point: function (v) {\n    Point = v;\n  }\n}, 1);\nvar svg;\nmodule.link(\"/lib/svg\", {\n  svg: function (v) {\n    svg = v;\n  }\n}, 2);\nvar size = 1024;\nvar rise = 900;\nvar num_to_match = 8;\nvar voronoi = undefined;\n\nvar filterMedian = function (median, n) {\n  var distances = _.range(median.length - 1).map(function (i) {\n    return Math.sqrt(Point.distance2(median[i], median[i + 1]));\n  });\n\n  var total = 0;\n  distances.map(function (x) {\n    return total += x;\n  });\n  var result = [];\n  var index = 0;\n  var position = median[0];\n  var total_so_far = 0;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(_.range(n - 1)), _step; !(_step = _iterator()).done;) {\n    var i = _step.value;\n    var target = i * total / (n - 1);\n\n    while (total_so_far < target) {\n      var step = Math.sqrt(Point.distance2(position, median[index + 1]));\n\n      if (total_so_far + step < target) {\n        index += 1;\n        position = median[index];\n        total_so_far += step;\n      } else {\n        var t = (target - total_so_far) / step;\n        position = [(1 - t) * position[0] + t * median[index + 1][0], (1 - t) * position[1] + t * median[index + 1][1]];\n        total_so_far = target;\n      }\n    }\n\n    result.push(Point.clone(position));\n  }\n\n  result.push(median[median.length - 1]);\n  return result;\n};\n\nvar findLongestShortestPath = function (adjacency, vertices, node) {\n  var path = findPathFromFurthestNode(adjacency, vertices, node);\n  return findPathFromFurthestNode(adjacency, vertices, path[0]);\n};\n\nvar findPathFromFurthestNode = function (adjacency, vertices, node, visited) {\n  visited = visited || {};\n  visited[node] = true;\n  var result = [];\n  result.distance = 0;\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(adjacency[node] || []), _step2; !(_step2 = _iterator2()).done;) {\n    var neighbor = _step2.value;\n\n    if (!visited[neighbor]) {\n      var candidate = findPathFromFurthestNode(adjacency, vertices, neighbor, visited);\n      candidate.distance += Math.sqrt(Point.distance2(vertices[node], vertices[neighbor]));\n\n      if (candidate.distance > result.distance) {\n        result = candidate;\n      }\n    }\n  }\n\n  result.push(node);\n  return result;\n};\n\nvar findStrokeMedian = function (stroke) {\n  var paths = svg.convertSVGPathToPaths(stroke);\n  assert(paths.length === 1, \"Got stroke with multiple loops: \" + stroke);\n  var polygon = undefined;\n  var diagram = undefined;\n\n  for (var _i = 0, _arr = [16, 64]; _i < _arr.length; _i++) {\n    var approximation = _arr[_i];\n    polygon = svg.getPolygonApproximation(paths[0], approximation);\n    voronoi = voronoi || new Voronoi();\n    var sites = polygon.map(function (point) {\n      return {\n        x: point[0],\n        y: point[1]\n      };\n    });\n    var bounding_box = {\n      xl: -size,\n      xr: size,\n      yt: -size,\n      yb: size\n    };\n\n    try {\n      diagram = voronoi.compute(sites, bounding_box);\n      break;\n    } catch (error) {\n      console.error(\"WARNING: Voronoi computation failed at \" + approximation + \".\");\n    }\n  }\n\n  assert(diagram, 'Voronoi computation failed completely!');\n  diagram.vertices.map(function (x, i) {\n    x.include = svg.polygonContainsPoint(polygon, [x.x, x.y]);\n    x.index = i;\n  });\n  var vertices = diagram.vertices.map(function (x) {\n    return [x.x, x.y].map(Math.round);\n  });\n  var edges = diagram.edges.map(function (x) {\n    return [x.va.index, x.vb.index];\n  }).filter(function (x) {\n    return diagram.vertices[x[0]].include && diagram.vertices[x[1]].include;\n  });\n  voronoi.recycle(diagram);\n  assert(edges.length > 0);\n  var adjacency = {};\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(edges), _step3; !(_step3 = _iterator3()).done;) {\n    var edge = _step3.value;\n    adjacency[edge[0]] = adjacency[edge[0]] || [];\n    adjacency[edge[0]].push(edge[1]);\n    adjacency[edge[1]] = adjacency[edge[1]] || [];\n    adjacency[edge[1]].push(edge[0]);\n  }\n\n  var root = edges[0][0];\n  var path = findLongestShortestPath(adjacency, vertices, root);\n  var points = path.map(function (i) {\n    return vertices[i];\n  });\n  var tolerance = 4;\n  var simple = simplify(points.map(function (x) {\n    return {\n      x: x[0],\n      y: x[1]\n    };\n  }), tolerance);\n  return simple.map(function (x) {\n    return [x.x, x.y];\n  });\n};\n\nvar normalizeForMatch = function (median) {\n  return filterMedian(median, num_to_match).map(function (x) {\n    return [x[0] / size, (rise - x[1]) / size];\n  });\n};\n\nvar median_util = {\n  findStrokeMedian: findStrokeMedian,\n  normalizeForMatch: normalizeForMatch\n};","map":{"version":3,"sources":["lib/median_util.js"],"names":["_createForOfIteratorHelperLoose","module","link","default","v","export","median_util","simplify","assert","Point","svg","size","rise","num_to_match","voronoi","undefined","filterMedian","median","n","distances","_","range","length","map","i","Math","sqrt","distance2","total","x","result","index","position","total_so_far","target","step","t","push","clone","findLongestShortestPath","adjacency","vertices","node","path","findPathFromFurthestNode","visited","distance","neighbor","candidate","findStrokeMedian","stroke","paths","convertSVGPathToPaths","polygon","diagram","approximation","getPolygonApproximation","Voronoi","sites","point","y","bounding_box","xl","xr","yt","yb","compute","error","console","include","polygonContainsPoint","round","edges","va","vb","filter","recycle","edge","root","points","tolerance","simple","normalizeForMatch"],"mappings":"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","sourcesContent":["import simplify from '/lib/external/simplify/1.2.2/simplify';\n\nimport {assert, Point} from '/lib/base';\nimport {svg} from '/lib/svg';\n\nconst size = 1024;\nconst rise = 900;\nconst num_to_match = 8;\n\nlet voronoi = undefined;\n\nconst filterMedian = (median, n) => {\n  const distances = _.range(median.length - 1).map(\n      (i) => Math.sqrt(Point.distance2(median[i], median[i + 1])));\n  let total = 0;\n  distances.map((x) => total += x);\n  const result = [];\n  let index = 0;\n  let position = median[0];\n  let total_so_far = 0;\n  for (let i of _.range(n - 1)) {\n    const target = i*total/(n - 1);\n    while (total_so_far < target) {\n      const step = Math.sqrt(Point.distance2(position, median[index + 1]));\n      if (total_so_far + step < target) {\n        index += 1;\n        position = median[index];\n        total_so_far += step;\n      } else {\n        const t = (target - total_so_far)/step;\n        position = [(1 - t)*position[0] + t*median[index + 1][0],\n                    (1 - t)*position[1] + t*median[index + 1][1]];\n        total_so_far = target;\n      }\n    }\n    result.push(Point.clone(position));\n  }\n  result.push(median[median.length - 1]);\n  return result;\n}\n\nconst findLongestShortestPath = (adjacency, vertices, node) => {\n  const path = findPathFromFurthestNode(adjacency, vertices, node);\n  return findPathFromFurthestNode(adjacency, vertices, path[0]);\n}\n\nconst findPathFromFurthestNode = (adjacency, vertices, node, visited) => {\n  visited = visited || {};\n  visited[node] = true;\n  let result = [];\n  result.distance = 0;\n  for (let neighbor of adjacency[node] || []) {\n    if (!visited[neighbor]) {\n      const candidate = findPathFromFurthestNode(\n          adjacency, vertices, neighbor, visited);\n      candidate.distance +=\n          Math.sqrt(Point.distance2(vertices[node], vertices[neighbor]));\n      if (candidate.distance > result.distance) {\n        result = candidate;\n      }\n    }\n  }\n  result.push(node);\n  return result;\n}\n\nconst findStrokeMedian = (stroke) => {\n  const paths = svg.convertSVGPathToPaths(stroke);\n  assert(paths.length === 1, `Got stroke with multiple loops: ${stroke}`);\n\n  let polygon = undefined;\n  let diagram = undefined;\n  for (let approximation of [16, 64]) {\n    polygon = svg.getPolygonApproximation(paths[0], approximation);\n    voronoi = voronoi || new Voronoi;\n    const sites = polygon.map((point) => ({x: point[0], y: point[1]}));\n    const bounding_box = {xl: -size, xr: size, yt: -size, yb: size};\n    try {\n      diagram = voronoi.compute(sites, bounding_box);\n      break;\n    } catch(error) {\n      console.error(`WARNING: Voronoi computation failed at ${approximation}.`);\n    }\n  }\n  assert(diagram, 'Voronoi computation failed completely!');\n\n  diagram.vertices.map((x, i) => {\n    x.include = svg.polygonContainsPoint(polygon, [x.x, x.y]);\n    x.index = i;\n  });\n  const vertices = diagram.vertices.map((x) => [x.x, x.y].map(Math.round));\n  const edges = diagram.edges.map((x) => [x.va.index, x.vb.index]).filter(\n      (x) => diagram.vertices[x[0]].include && diagram.vertices[x[1]].include);\n  voronoi.recycle(diagram);\n\n  assert(edges.length > 0);\n  const adjacency = {};\n  for (let edge of edges) {\n    adjacency[edge[0]] = adjacency[edge[0]] || [];\n    adjacency[edge[0]].push(edge[1]);\n    adjacency[edge[1]] = adjacency[edge[1]] || [];\n    adjacency[edge[1]].push(edge[0]);\n  }\n  const root = edges[0][0];\n  const path = findLongestShortestPath(adjacency, vertices, root);\n  const points = path.map((i) => vertices[i]);\n\n  const tolerance = 4;\n  const simple = simplify(points.map((x) => ({x: x[0], y: x[1]})), tolerance);\n  return simple.map((x) => [x.x, x.y]);\n}\n\nconst normalizeForMatch = (median) => {\n  return filterMedian(median, num_to_match).map(\n      (x) => [x[0]/size, (rise - x[1])/size]);\n}\n\nconst median_util = {\n  findStrokeMedian: findStrokeMedian,\n  normalizeForMatch: normalizeForMatch,\n};\n\nexport {median_util};\n"]},"sourceType":"module","externalDependencies":{},"hash":"9185943e1a6c73ed87727db0ae18b065f55c316b"}
