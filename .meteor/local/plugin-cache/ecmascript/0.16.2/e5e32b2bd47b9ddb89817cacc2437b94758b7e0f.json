{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/lib/decomposition_util.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"lib/decomposition_util.js","filename":"/Users/a37/code/github/makemeahanzi-tool/lib/decomposition_util.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/lib/decomposition_util.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/decomposition_util.js"}},"code":"var _createForOfIteratorHelperLoose;\n\nmodule.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n  default: function (v) {\n    _createForOfIteratorHelperLoose = v;\n  }\n}, 0);\nmodule.export({\n  decomposition_util: function () {\n    return decomposition_util;\n  }\n});\nvar assert;\nmodule.link(\"/lib/base\", {\n  assert: function (v) {\n    assert = v;\n  }\n}, 0);\nvar decomposition_util = {};\ndecomposition_util.ids_data = {\n  '⿰': {\n    label: 'Left-to-right',\n    arity: 2\n  },\n  '⿱': {\n    label: 'Top-to-bottom',\n    arity: 2\n  },\n  '⿴': {\n    label: 'Surround',\n    arity: 2\n  },\n  '⿵': {\n    label: 'Surround-from-above',\n    arity: 2\n  },\n  '⿶': {\n    label: 'Surround-from-below',\n    arity: 2\n  },\n  '⿷': {\n    label: 'Surround-from-left',\n    arity: 2\n  },\n  '⿸': {\n    label: 'Surround-from-upper-left',\n    arity: 2\n  },\n  '⿹': {\n    label: 'Surround-from-upper-right',\n    arity: 2\n  },\n  '⿺': {\n    label: 'Surround-from-lower-left',\n    arity: 2\n  },\n  '⿻': {\n    label: 'Overlaid',\n    arity: 2\n  },\n  '⿳': {\n    label: 'Top-to-middle-to-bottom',\n    arity: 3\n  },\n  '⿲': {\n    label: 'Left-to-middle-to-right',\n    arity: 3\n  }\n};\ndecomposition_util.ideograph_description_characters = Object.keys(decomposition_util.ids_data);\nvar UNKNOWN_COMPONENT = '？';\n\nvar augmentTreeWithPathData = function (tree, path) {\n  tree.path = path;\n  var children = (tree.children || []).length;\n\n  for (var i = 0; i < children; i++) {\n    augmentTreeWithPathData(tree.children[i], path.concat([i]));\n  }\n\n  return tree;\n};\n\nvar parseSubtree = function (decomposition, index) {\n  assert(index[0] < decomposition.length, \"Not enough characters in \" + decomposition + \".\");\n  var current = decomposition[index[0]];\n  index[0] += 1;\n\n  if (decomposition_util.ids_data.hasOwnProperty(current)) {\n    var result = {\n      type: 'compound',\n      value: current,\n      children: []\n    };\n\n    for (var i = 0; i < decomposition_util.ids_data[current].arity; i++) {\n      result.children.push(parseSubtree(decomposition, index));\n    }\n\n    return result;\n  } else if (current === UNKNOWN_COMPONENT) {\n    return {\n      type: 'character',\n      value: '?'\n    };\n  } // Characters may be followed by a [x] annotation that records which variant\n  // of the character to use at that position. We ignore these annotations.\n\n\n  if (decomposition[index[0]] === '[') {\n    assert('0123456789'.indexOf(decomposition[index[0] + 1]) >= 0);\n    assert(decomposition[index[0] + 2] === ']');\n    index[0] += 3;\n  }\n\n  return {\n    type: 'character',\n    value: current\n  };\n};\n\nvar serializeSubtree = function (subtree, result) {\n  result[0] += subtree.value === '?' ? UNKNOWN_COMPONENT : subtree.value;\n  var children = subtree.children ? subtree.children.length : 0;\n\n  for (var i = 0; i < children; i++) {\n    serializeSubtree(subtree.children[i], result);\n  }\n};\n\ndecomposition_util.collectComponents = function (tree, result) {\n  result = result || [];\n\n  if (tree.type === 'character' && tree.value !== '?') {\n    result.push(tree.value);\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(tree.children || []), _step; !(_step = _iterator()).done;) {\n    var child = _step.value;\n    decomposition_util.collectComponents(child, result);\n  }\n\n  return result;\n};\n\ndecomposition_util.convertDecompositionToTree = function (decomposition) {\n  var index = [0];\n  decomposition = decomposition || UNKNOWN_COMPONENT;\n  var result = parseSubtree(decomposition, index);\n  assert(index[0] === decomposition.length, \"Too many characters in \" + decomposition + \".\");\n  return augmentTreeWithPathData(result, []);\n};\n\ndecomposition_util.convertTreeToDecomposition = function (tree) {\n  var result = [''];\n  serializeSubtree(tree, result);\n  return result[0];\n};\n\ndecomposition_util.getSubtree = function (tree, path) {\n  var subtree = tree;\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(path), _step2; !(_step2 = _iterator2()).done;) {\n    var index = _step2.value;\n    assert(0 <= index && index < subtree.children.length);\n    subtree = subtree.children[index];\n  }\n\n  return subtree;\n};","map":{"version":3,"sources":["lib/decomposition_util.js"],"names":["_createForOfIteratorHelperLoose","module","link","default","v","export","decomposition_util","assert","ids_data","label","arity","ideograph_description_characters","Object","keys","UNKNOWN_COMPONENT","augmentTreeWithPathData","tree","path","children","length","i","concat","parseSubtree","decomposition","index","current","hasOwnProperty","result","type","value","push","indexOf","serializeSubtree","subtree","collectComponents","child","convertDecompositionToTree","convertTreeToDecomposition","getSubtree"],"mappings":"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","sourcesContent":["import {assert} from '/lib/base';\n\nconst decomposition_util = {};\n\ndecomposition_util.ids_data = {\n  '⿰': {label: 'Left-to-right', arity: 2},\n  '⿱': {label: 'Top-to-bottom', arity: 2},\n  '⿴': {label: 'Surround', arity: 2},\n  '⿵': {label: 'Surround-from-above', arity: 2},\n  '⿶': {label: 'Surround-from-below', arity: 2},\n  '⿷': {label: 'Surround-from-left', arity: 2},\n  '⿸': {label: 'Surround-from-upper-left', arity: 2},\n  '⿹': {label: 'Surround-from-upper-right', arity: 2},\n  '⿺': {label: 'Surround-from-lower-left', arity: 2},\n  '⿻': {label: 'Overlaid', arity: 2},\n  '⿳': {label: 'Top-to-middle-to-bottom', arity: 3},\n  '⿲': {label: 'Left-to-middle-to-right', arity: 3},\n}\ndecomposition_util.ideograph_description_characters =\n    Object.keys(decomposition_util.ids_data);\n\nconst UNKNOWN_COMPONENT = '？';\n\nconst augmentTreeWithPathData = (tree, path) => {\n  tree.path = path;\n  const children = (tree.children || []).length;\n  for (let i = 0; i < children; i++) {\n    augmentTreeWithPathData(tree.children[i], path.concat([i]));\n  }\n  return tree;\n}\n\nconst parseSubtree = (decomposition, index) => {\n  assert(index[0] < decomposition.length,\n         `Not enough characters in ${decomposition}.`);\n  const current = decomposition[index[0]];\n  index[0] += 1;\n  if (decomposition_util.ids_data.hasOwnProperty(current)) {\n    const result = {type: 'compound', value: current, children: []};\n    for (let i = 0; i < decomposition_util.ids_data[current].arity; i++) {\n      result.children.push(parseSubtree(decomposition, index));\n    }\n    return result;\n  } else if (current === UNKNOWN_COMPONENT) {\n    return {type: 'character', value: '?'};\n  }\n  // Characters may be followed by a [x] annotation that records which variant\n  // of the character to use at that position. We ignore these annotations.\n  if (decomposition[index[0]] === '[') {\n    assert('0123456789'.indexOf(decomposition[index[0] + 1]) >= 0);\n    assert(decomposition[index[0] + 2] === ']');\n    index[0] += 3;\n  }\n  return {type: 'character', value: current};\n}\n\nconst serializeSubtree = (subtree, result) => {\n  result[0] += subtree.value === '?' ? UNKNOWN_COMPONENT : subtree.value;\n  const children = subtree.children ? subtree.children.length : 0;\n  for (let i = 0; i < children; i++) {\n    serializeSubtree(subtree.children[i], result);\n  }\n}\n\ndecomposition_util.collectComponents = (tree, result) => {\n  result = result || [];\n  if (tree.type === 'character' && tree.value !== '?') {\n    result.push(tree.value);\n  }\n  for (let child of tree.children || []) {\n    decomposition_util.collectComponents(child, result);\n  }\n  return result;\n}\n\ndecomposition_util.convertDecompositionToTree = (decomposition) => {\n  const index = [0];\n  decomposition = decomposition || UNKNOWN_COMPONENT;\n  const result = parseSubtree(decomposition, index);\n  assert(index[0] === decomposition.length,\n         `Too many characters in ${decomposition}.`);\n  return augmentTreeWithPathData(result, []);\n}\n\ndecomposition_util.convertTreeToDecomposition = (tree) => {\n  const result = [''];\n  serializeSubtree(tree, result);\n  return result[0];\n}\n\ndecomposition_util.getSubtree = (tree, path) => {\n  let subtree = tree;\n  for (let index of path) {\n    assert(0 <= index && index < subtree.children.length);\n    subtree = subtree.children[index];\n  }\n  return subtree;\n}\n\nexport {decomposition_util};\n"]},"sourceType":"module","externalDependencies":{},"hash":"e5e32b2bd47b9ddb89817cacc2437b94758b7e0f"}
