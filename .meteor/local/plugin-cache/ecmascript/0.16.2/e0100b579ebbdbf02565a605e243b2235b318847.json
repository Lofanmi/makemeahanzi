{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/lib/animation.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"lib/animation.js","filename":"/Users/a37/code/github/makemeahanzi-tool/lib/animation.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/lib/animation.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/animation.js"}},"code":"module.export({\n  getAnimationData: () => getAnimationData\n});\nconst kIdPrefix = 'make-me-a-hanzi';\nconst kWidth = 128;\n\nconst distance2 = (point1, point2) => {\n  const diff = [point1[0] - point2[0], point1[1] - point2[1]];\n  return diff[0] * diff[0] + diff[1] * diff[1];\n};\n\nconst getMedianLength = median => {\n  let result = 0;\n\n  for (let i = 0; i < median.length - 1; i++) {\n    result += Math.sqrt(distance2(median[i], median[i + 1]));\n  }\n\n  return result;\n};\n\nconst getMedianPath = median => {\n  const result = [];\n\n  for (let point of median) {\n    result.push(result.length === 0 ? 'M' : 'L');\n    result.push('' + point[0]);\n    result.push('' + point[1]);\n  }\n\n  return result.join(' ');\n};\n\nconst getAnimationData = (strokes, medians, options) => {\n  options = options || {};\n  const delay = 1024 * (options.delay || 0.3);\n  const speed = 1024 * (options.speed || 0.02);\n  const lengths = medians.map(x => getMedianLength(x) + kWidth).map(Math.round);\n  const paths = medians.map(getMedianPath);\n  const animations = [];\n  let total_duration = 0;\n\n  for (let i = 0; i < strokes.length; i++) {\n    const offset = lengths[i] + kWidth;\n    const duration = (delay + offset) / speed / 60;\n    const fraction = Math.round(100 * offset / (delay + offset));\n    animations.push({\n      animation_id: \"\".concat(kIdPrefix, \"-animation-\").concat(i),\n      clip_id: \"\".concat(kIdPrefix, \"-clip-\").concat(i),\n      d: paths[i],\n      delay: \"\".concat(total_duration, \"s\"),\n      duration: \"\".concat(duration, \"s\"),\n      fraction: \"\".concat(fraction, \"%\"),\n      keyframes: \"keyframes\".concat(i),\n      length: lengths[i],\n      offset: offset,\n      spacing: 2 * lengths[i],\n      stroke: strokes[i],\n      width: kWidth\n    });\n    total_duration += duration;\n  }\n\n  return {\n    animations: animations,\n    strokes: strokes\n  };\n};","map":{"version":3,"sources":["lib/animation.js"],"names":["module","export","getAnimationData","kIdPrefix","kWidth","distance2","point1","point2","diff","getMedianLength","median","result","i","length","Math","sqrt","getMedianPath","point","push","join","strokes","medians","options","delay","speed","lengths","map","x","round","paths","animations","total_duration","offset","duration","fraction","animation_id","clip_id","d","keyframes","spacing","stroke","width"],"mappings":"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","sourcesContent":["const kIdPrefix = 'make-me-a-hanzi';\nconst kWidth = 128;\n\nconst distance2 = (point1, point2) => {\n  const diff = [point1[0] - point2[0], point1[1] - point2[1]];\n  return diff[0]*diff[0] + diff[1]*diff[1];\n}\n\nconst getMedianLength = (median) => {\n  let result = 0;\n  for (let i = 0; i < median.length - 1; i++) {\n    result += Math.sqrt(distance2(median[i], median[i + 1]));\n  }\n  return result;\n}\n\nconst getMedianPath = (median) => {\n  const result = [];\n  for (let point of median) {\n    result.push(result.length === 0 ? 'M' : 'L');\n    result.push('' + point[0]);\n    result.push('' + point[1]);\n  }\n  return result.join(' ');\n}\n\n\nconst getAnimationData = (strokes, medians, options) => {\n  options = options || {};\n  const delay = 1024 * (options.delay || 0.3);\n  const speed = 1024 * (options.speed || 0.02);\n\n  const lengths = medians.map((x) => getMedianLength(x) + kWidth)\n                         .map(Math.round);\n  const paths = medians.map(getMedianPath);\n\n  const animations = [];\n  let total_duration = 0;\n  for (let i = 0; i < strokes.length; i++) {\n    const offset = lengths[i] + kWidth;\n    const duration = (delay + offset) / speed / 60;\n    const fraction = Math.round(100 * offset / (delay + offset));\n    animations.push({\n      animation_id: `${kIdPrefix}-animation-${i}`,\n      clip_id: `${kIdPrefix}-clip-${i}`,\n      d: paths[i],\n      delay: `${total_duration}s`,\n      duration: `${duration}s`,\n      fraction: `${fraction}%`,\n      keyframes: `keyframes${i}`,\n      length: lengths[i],\n      offset: offset,\n      spacing: 2 * lengths[i],\n      stroke: strokes[i],\n      width: kWidth,\n    });\n    total_duration += duration;\n  }\n\n  return {animations: animations, strokes: strokes};\n}\n\nexport {getAnimationData};\n"]},"sourceType":"module","externalDependencies":{},"hash":"e0100b579ebbdbf02565a605e243b2235b318847"}
