{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/server/migration.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/migration.js","filename":"/Users/a37/code/github/makemeahanzi-tool/server/migration.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/server/migration.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/migration.js"}},"code":"let getAnimationData;\nmodule.link(\"/lib/animation\", {\n  getAnimationData(v) {\n    getAnimationData = v;\n  }\n\n}, 0);\nlet assert, getPWD, Point;\nmodule.link(\"/lib/base\", {\n  assert(v) {\n    assert = v;\n  },\n\n  getPWD(v) {\n    getPWD = v;\n  },\n\n  Point(v) {\n    Point = v;\n  }\n\n}, 1);\nlet cjklib;\nmodule.link(\"/lib/cjklib\", {\n  cjklib(v) {\n    cjklib = v;\n  }\n\n}, 2);\nlet Glyphs;\nmodule.link(\"/lib/glyphs\", {\n  Glyphs(v) {\n    Glyphs = v;\n  }\n\n}, 3);\nlet fixStrokes;\nmodule.link(\"/lib/stroke_caps/fixStrokes\", {\n  fixStrokes(v) {\n    fixStrokes = v;\n  }\n\n}, 4);\nlet stroke_extractor;\nmodule.link(\"/lib/stroke_extractor\", {\n  stroke_extractor(v) {\n    stroke_extractor = v;\n  }\n\n}, 5);\nlet svg;\nmodule.link(\"/lib/svg\", {\n  svg(v) {\n    svg = v;\n  }\n\n}, 6);\nlet SpacebarsCompiler;\nmodule.link(\"meteor/spacebars-compiler\", {\n  SpacebarsCompiler(v) {\n    SpacebarsCompiler = v;\n  }\n\n}, 7);\n\nconst addFrequencyField = glyph => {\n  const data = cjklib.getCharacterData(glyph.character);\n  glyph.metadata.frequency = data.frequency;\n  Glyphs.save(glyph);\n};\n\nconst addSimplifiedAndTraditionalFields = glyph => {\n  const data = cjklib.getCharacterData(glyph.character);\n  glyph.simplified = data.simplified;\n  glyph.traditional = data.traditional;\n  Glyphs.save(glyph);\n};\n\nconst addStrokeCaps = glyph => {\n  const raw = glyph.stages.strokes;\n  if (raw.raw || raw.corrected) return;\n  glyph.stages.strokes = {\n    corrected: fixStrokes(raw),\n    raw\n  };\n  Glyphs.save(glyph);\n};\n\nconst checkStrokeExtractorStability = glyph => {\n  const strokes = stroke_extractor.getStrokes(glyph.stages.path, glyph.stages.bridges);\n\n  if (!_.isEqual(strokes.strokes.sort(), glyph.stages.strokes.sort())) {\n    console.log(\"Different strokes for \".concat(glyph.character));\n  }\n};\n\nconst convertOldPathSchemaToSVGPath = path => {\n  const terms = [];\n\n  for (let segment of path) {\n    assert('LMQZ'.indexOf(segment.type) >= 0, segment.type);\n    terms.push(segment.type);\n\n    if (segment.x1 !== undefined) {\n      terms.push(segment.x1);\n      terms.push(segment.y1);\n    }\n\n    if (segment.x !== undefined) {\n      terms.push(segment.x);\n      terms.push(segment.y);\n    }\n  }\n\n  return terms.join(' ');\n};\n\nconst dumpGlyph = (dictionary, graphics) => glyph => {\n  if (!glyph.stages.verified) {\n    return;\n  }\n\n  const analysis = glyph.stages.analysis;\n  const order = glyph.stages.order;\n  const data = cjklib.getCharacterData(glyph.character);\n  const pinyin = (glyph.metadata.pinyin || data.pinyin || '').split(',').map(x => x.trim()).filter(x => x);\n  const strokes = order.map(x => glyph.stages.strokes.corrected[x.stroke]);\n  const medians = order.map(x => x.median);\n  strokes.map(x => assert(x));\n  medians.map(x => assert(x));\n  const has_etymology = analysis.etymology.hint || analysis.etymology.type === 'pictophonetic';\n  dictionary.write(JSON.stringify({\n    character: glyph.character,\n    definition: glyph.metadata.definition || data.definition,\n    pinyin: pinyin,\n    decomposition: analysis.decomposition || '？',\n    etymology: has_etymology ? analysis.etymology : undefined,\n    radical: analysis.radical,\n    matches: order.map(x => x.match)\n  }) + '\\n');\n  graphics.write(JSON.stringify({\n    character: glyph.character,\n    strokes: strokes,\n    medians: medians\n  }) + '\\n');\n};\n\nconst fixBrokenMedians = (glyph, threshold) => {\n  threshold = threshold || 16;\n\n  for (let stroke of glyph.stages.order) {\n    const distance = Math.sqrt(Point.distance2(stroke.median[0], stroke.median[stroke.median.length - 1]));\n\n    if (distance < threshold) {\n      console.log(\"Found broken median in \".concat(glyph.character));\n      const paths = svg.convertSVGPathToPaths(glyph.stages.strokes[stroke.stroke]);\n      assert(paths.length === 1);\n      const polygon = svg.getPolygonApproximation(paths[0], threshold);\n      let best_point = null;\n      let best_value = -Infinity;\n\n      for (let point of polygon) {\n        const value = Point.distance2(point, stroke.median[0]);\n\n        if (value > best_value) {\n          best_point = point;\n          best_value = value;\n        }\n      }\n\n      assert(best_point !== null);\n      stroke.median = [best_point, stroke.median[0]];\n      Glyphs.save(glyph);\n    }\n  }\n};\n\nconst migrateOldGlyphSchemaToNew = glyph => {\n  const codepoint = parseInt(glyph.name.substr(3), 16);\n  const character = String.fromCodePoint(codepoint);\n  const data = cjklib.getCharacterData(character);\n  assert(glyph.manual && glyph.manual.verified !== undefined, \"Glyph \".concat(character, \" was not verified.\")); // Pull definition and pinyin from simplified character, if available.\n\n  let definition = undefined;\n  let pinyin = undefined;\n\n  if (data.simplified) {\n    const simplified = Glyphs.get(data.simplified);\n    const metadata = (simplified || {\n      metadata: {}\n    }).metadata;\n    const base = cjklib.getCharacterData(data.simplified);\n    definition = metadata.definition || base.definition;\n    pinyin = metadata.pinyin || base.pinyin;\n  }\n\n  const result = {\n    character: character,\n    codepoint: codepoint,\n    metadata: {\n      definition: definition,\n      frequency: data.frequency,\n      kangxi_index: data.kangxi_index,\n      pinyin: pinyin,\n      strokes: undefined\n    },\n    stages: {\n      path: convertOldPathSchemaToSVGPath(glyph.path),\n      bridges: glyph.manual.bridges,\n      strokes: glyph.derived.strokes,\n      analysis: undefined,\n      order: undefined,\n      verified: undefined\n    },\n    simplified: data.simplified,\n    traditional: data.traditional\n  };\n  assert(result.stages.path !== undefined);\n  assert(result.stages.bridges !== undefined);\n  assert(result.stages.strokes !== undefined);\n  return result;\n}; // Meteor methods that make use of the migration system follow.\n\n\nconst dumpToNewSchemaJSON = () => {\n  const fs = Npm.require('fs');\n\n  const path = Npm.require('path');\n\n  const pwd = getPWD();\n  const dictionary = fs.createWriteStream(path.join(pwd, 'dictionary.txt'));\n  const graphics = fs.createWriteStream(path.join(pwd, 'graphics.txt'));\n  runMigration(dumpGlyph(dictionary, graphics), () => {\n    dictionary.end();\n    graphics.end();\n  });\n};\n\nconst exportSVGs = () => {\n  const fs = Npm.require('fs');\n\n  const path = Npm.require('path');\n\n  const pwd = getPWD();\n  const directory = path.join(pwd, '.svgs');\n  fs.mkdirSync(directory);\n  runMigration(glyph => {\n    const codepoint = glyph.character.codePointAt(0);\n    const medians = glyph.stages.order.map(x => x.median);\n    const strokes = glyph.stages.order.map(x => glyph.stages.strokes.corrected[x.stroke]);\n    const raw = SSR.render('animation', getAnimationData(strokes, medians));\n    const svg = raw.replace(/\\n  /g, '\\n').split('\\n').slice(1, -2).join('\\n');\n    fs.writeFileSync(path.join(directory, \"\".concat(codepoint, \".svg\")), svg);\n  }, () => {});\n};\n\nconst loadFromOldSchemaJSON = filename => {\n  const fs = Npm.require('fs');\n\n  const path = Npm.require('path');\n\n  const filepath = path.join(getPWD(), 'public', filename);\n  fs.readFile(filepath, 'utf8', Meteor.bindEnvironment((error, data) => {\n    if (error) throw error;\n    const lines = data.split('\\n').filter(x => x.length > 0);\n    console.log(\"Loaded \".concat(lines.length, \" old-schema glyphs.\"));\n    let migrated = 0;\n    let definition = 0;\n    let pinyin = 0;\n\n    for (var line of lines) {\n      try {\n        const old_glyph = JSON.parse(line);\n        const new_glyph = migrateOldGlyphSchemaToNew(old_glyph);\n        const glyph = Glyphs.get(new_glyph.character);\n\n        if (glyph && glyph.stages.verified) {\n          console.log(\"Glyph already verified: \".concat(glyph.character));\n          continue;\n        }\n\n        Glyphs.save(new_glyph);\n        migrated += 1;\n        definition += new_glyph.metadata.definition ? 1 : 0;\n        pinyin += new_glyph.metadata.pinyin ? 1 : 0;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    console.log(\"Successfully migrated \".concat(migrated, \" glyphs.\"));\n    console.log(\"Pulled definitions for \".concat(definition, \" glyphs.\"));\n    console.log(\"Pulled pinyin for \".concat(pinyin, \" glyphs.\"));\n  }));\n}; // Runs the given per-glyph callback for each glyph in the database.\n// When all the glyphs are migrated, runs the completion callback.\n\n\nconst runMigration = (per_glyph_callback, completion_callback) => {\n  console.log('Running migration...');\n\n  if (per_glyph_callback) {\n    const codepoints = Glyphs.find({}, {\n      fields: {\n        codepoint: 1\n      },\n      sort: {\n        codepoint: 1\n      }\n    }).fetch();\n\n    for (let i = 0; i < codepoints.length; i++) {\n      const glyph = Glyphs.findOne({\n        codepoint: codepoints[i].codepoint\n      });\n      assert(glyph, 'Glyphs changed during migration!');\n      per_glyph_callback(glyph);\n\n      if ((i + 1) % 1000 === 0) {\n        console.log(\"Migrated \".concat(i + 1, \" glyphs.\"));\n      }\n    }\n  }\n\n  if (completion_callback) {\n    completion_callback();\n  }\n\n  console.log('Migration complete.');\n};\n\nMeteor.methods({\n  'export': () => {\n    cjklib.promise.then(Meteor.bindEnvironment(dumpToNewSchemaJSON)).catch(console.error.bind(console));\n  },\n  'exportSVGs': exportSVGs,\n  'loadFromOldSchemaJSON': filename => {\n    cjklib.promise.then(Meteor.bindEnvironment(() => loadFromOldSchemaJSON(filename))).catch(console.error.bind(console));\n  }\n});\nMeteor.startup(() => {\n  SSR.compileTemplate('animation', Assets.getText('animation.html'));\n  const completion_callback = undefined;\n  const per_glyph_callback = undefined;\n\n  if (!per_glyph_callback && !completion_callback) {\n    return;\n  }\n\n  console.log('Preparing for migration...');\n\n  const migration = () => runMigration(per_glyph_callback, completion_callback);\n\n  cjklib.promise.then(Meteor.bindEnvironment(migration)).catch(console.error.bind(console));\n});","map":{"version":3,"sources":["server/migration.js"],"names":["getAnimationData","module","link","v","assert","getPWD","Point","cjklib","Glyphs","fixStrokes","stroke_extractor","svg","SpacebarsCompiler","addFrequencyField","glyph","data","getCharacterData","character","metadata","frequency","save","addSimplifiedAndTraditionalFields","simplified","traditional","addStrokeCaps","raw","stages","strokes","corrected","checkStrokeExtractorStability","getStrokes","path","bridges","_","isEqual","sort","console","log","convertOldPathSchemaToSVGPath","terms","segment","indexOf","type","push","x1","undefined","y1","x","y","join","dumpGlyph","dictionary","graphics","verified","analysis","order","pinyin","split","map","trim","filter","stroke","medians","median","has_etymology","etymology","hint","write","JSON","stringify","definition","decomposition","radical","matches","match","fixBrokenMedians","threshold","distance","Math","sqrt","distance2","length","paths","convertSVGPathToPaths","polygon","getPolygonApproximation","best_point","best_value","Infinity","point","value","migrateOldGlyphSchemaToNew","codepoint","parseInt","name","substr","String","fromCodePoint","manual","get","base","result","kangxi_index","derived","dumpToNewSchemaJSON","fs","Npm","require","pwd","createWriteStream","runMigration","end","exportSVGs","directory","mkdirSync","codePointAt","SSR","render","replace","slice","writeFileSync","loadFromOldSchemaJSON","filename","filepath","readFile","Meteor","bindEnvironment","error","lines","migrated","line","old_glyph","parse","new_glyph","per_glyph_callback","completion_callback","codepoints","find","fields","fetch","i","findOne","methods","promise","then","catch","bind","startup","compileTemplate","Assets","getText","migration"],"mappings":"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","sourcesContent":["import {getAnimationData} from '/lib/animation';\nimport {assert, getPWD, Point} from '/lib/base';\nimport {cjklib} from '/lib/cjklib';\nimport {Glyphs} from '/lib/glyphs';\nimport {fixStrokes} from '/lib/stroke_caps/fixStrokes';\nimport {stroke_extractor} from '/lib/stroke_extractor';\nimport {svg} from '/lib/svg';\nimport { SpacebarsCompiler } from 'meteor/spacebars-compiler';\n\nconst addFrequencyField = (glyph) => {\n  const data = cjklib.getCharacterData(glyph.character);\n  glyph.metadata.frequency = data.frequency;\n  Glyphs.save(glyph);\n}\n\nconst addSimplifiedAndTraditionalFields = (glyph) => {\n  const data = cjklib.getCharacterData(glyph.character);\n  glyph.simplified = data.simplified;\n  glyph.traditional = data.traditional;\n  Glyphs.save(glyph);\n}\n\nconst addStrokeCaps = (glyph) => {\n  const raw = glyph.stages.strokes;\n  if (raw.raw || raw.corrected) return;\n  glyph.stages.strokes = {corrected: fixStrokes(raw), raw};\n  Glyphs.save(glyph);\n}\n\nconst checkStrokeExtractorStability = (glyph) => {\n  const strokes = stroke_extractor.getStrokes(\n      glyph.stages.path, glyph.stages.bridges);\n  if (!_.isEqual(strokes.strokes.sort(), glyph.stages.strokes.sort())) {\n    console.log(`Different strokes for ${glyph.character}`);\n  }\n}\n\nconst convertOldPathSchemaToSVGPath = (path) => {\n  const terms = [];\n  for (let segment of path) {\n    assert('LMQZ'.indexOf(segment.type) >= 0, segment.type);\n    terms.push(segment.type);\n    if (segment.x1 !== undefined) {\n      terms.push(segment.x1);\n      terms.push(segment.y1);\n    }\n    if (segment.x !== undefined) {\n      terms.push(segment.x);\n      terms.push(segment.y);\n    }\n  }\n  return terms.join(' ');\n}\n\nconst dumpGlyph = (dictionary, graphics) => (glyph) => {\n  if (!glyph.stages.verified) {\n    return;\n  }\n  const analysis = glyph.stages.analysis;\n  const order = glyph.stages.order;\n  const data = cjklib.getCharacterData(glyph.character);\n  const pinyin = (glyph.metadata.pinyin || data.pinyin || '')\n                     .split(',').map((x) => x.trim()).filter((x) => x);\n  const strokes = order.map((x) => glyph.stages.strokes.corrected[x.stroke]);\n  const medians = order.map((x) => x.median);\n  strokes.map((x) => assert(x));\n  medians.map((x) => assert(x));\n  const has_etymology =\n      analysis.etymology.hint || (analysis.etymology.type === 'pictophonetic');\n\n  dictionary.write(JSON.stringify({\n    character: glyph.character,\n    definition: glyph.metadata.definition || data.definition,\n    pinyin: pinyin,\n    decomposition: analysis.decomposition || '？',\n    etymology: has_etymology ? analysis.etymology : undefined,\n    radical: analysis.radical,\n    matches: order.map((x) => x.match),\n  }) + '\\n');\n  graphics.write(JSON.stringify({\n    character: glyph.character,\n    strokes: strokes,\n    medians: medians,\n  }) + '\\n');\n}\n\nconst fixBrokenMedians = (glyph, threshold) => {\n  threshold = threshold || 16;\n  for (let stroke of glyph.stages.order) {\n    const distance = Math.sqrt(Point.distance2(\n        stroke.median[0], stroke.median[stroke.median.length - 1]));\n    if (distance < threshold) {\n      console.log(`Found broken median in ${glyph.character}`);\n      const paths = svg.convertSVGPathToPaths(\n          glyph.stages.strokes[stroke.stroke]);\n      assert(paths.length === 1);\n      const polygon = svg.getPolygonApproximation(paths[0], threshold);\n      let best_point = null;\n      let best_value = -Infinity;\n      for (let point of polygon) {\n        const value = Point.distance2(point, stroke.median[0])\n        if (value > best_value) {\n          best_point = point;\n          best_value = value;\n        }\n      }\n      assert(best_point !== null);\n      stroke.median = [best_point, stroke.median[0]];\n      Glyphs.save(glyph);\n    }\n  }\n}\n\nconst migrateOldGlyphSchemaToNew = (glyph) => {\n  const codepoint = parseInt(glyph.name.substr(3), 16);\n  const character = String.fromCodePoint(codepoint);\n  const data = cjklib.getCharacterData(character);\n  assert(glyph.manual && glyph.manual.verified !== undefined,\n         `Glyph ${character} was not verified.`);\n  // Pull definition and pinyin from simplified character, if available.\n  let definition = undefined;\n  let pinyin = undefined;\n  if (data.simplified) {\n    const simplified = Glyphs.get(data.simplified);\n    const metadata = (simplified || {metadata: {}}).metadata;\n    const base = cjklib.getCharacterData(data.simplified);\n    definition = metadata.definition || base.definition;\n    pinyin = metadata.pinyin || base.pinyin;\n  }\n  const result = {\n    character: character,\n    codepoint: codepoint,\n    metadata: {\n      definition: definition,\n      frequency: data.frequency,\n      kangxi_index: data.kangxi_index,\n      pinyin: pinyin,\n      strokes: undefined,\n    },\n    stages: {\n      path: convertOldPathSchemaToSVGPath(glyph.path),\n      bridges: glyph.manual.bridges,\n      strokes: glyph.derived.strokes,\n      analysis: undefined,\n      order: undefined,\n      verified: undefined,\n    },\n    simplified: data.simplified,\n    traditional: data.traditional,\n  };\n  assert(result.stages.path !== undefined);\n  assert(result.stages.bridges !== undefined);\n  assert(result.stages.strokes !== undefined);\n  return result;\n}\n\n// Meteor methods that make use of the migration system follow.\n\nconst dumpToNewSchemaJSON = () => {\n  const fs = Npm.require('fs');\n  const path = Npm.require('path');\n  const pwd = getPWD();\n  const dictionary = fs.createWriteStream(path.join(pwd, 'dictionary.txt'));\n  const graphics = fs.createWriteStream(path.join(pwd, 'graphics.txt'));\n  runMigration(dumpGlyph(dictionary, graphics), (() => {\n    dictionary.end();\n    graphics.end();\n  }));\n}\n\nconst exportSVGs = () => {\n  const fs = Npm.require('fs');\n  const path = Npm.require('path');\n  const pwd = getPWD();\n  const directory = path.join(pwd, '.svgs');\n  fs.mkdirSync(directory);\n  runMigration((glyph) => {\n    const codepoint = glyph.character.codePointAt(0);\n    const medians = glyph.stages.order.map((x) => x.median);\n    const strokes = glyph.stages.order.map(\n        (x) => glyph.stages.strokes.corrected[x.stroke]);\n    const raw = SSR.render('animation', getAnimationData(strokes, medians));\n    const svg = raw.replace(/\\n  /g, '\\n').split('\\n').slice(1, -2).join('\\n');\n    fs.writeFileSync(path.join(directory, `${codepoint}.svg`), svg);\n  }, () => {});\n}\n\nconst loadFromOldSchemaJSON = (filename) => {\n  const fs = Npm.require('fs');\n  const path = Npm.require('path');\n  const filepath = path.join(getPWD(), 'public', filename);\n  fs.readFile(filepath, 'utf8', Meteor.bindEnvironment((error, data) => {\n    if (error) throw error;\n    const lines = data.split('\\n').filter((x) => x.length > 0);\n    console.log(`Loaded ${lines.length} old-schema glyphs.`);\n    let migrated = 0;\n    let definition = 0;\n    let pinyin = 0;\n    for (var line of lines) {\n      try {\n        const old_glyph = JSON.parse(line);\n        const new_glyph = migrateOldGlyphSchemaToNew(old_glyph);\n        const glyph = Glyphs.get(new_glyph.character);\n        if (glyph && glyph.stages.verified) {\n          console.log(`Glyph already verified: ${glyph.character}`);\n          continue;\n        }\n        Glyphs.save(new_glyph);\n        migrated += 1;\n        definition += new_glyph.metadata.definition ? 1 : 0;\n        pinyin += new_glyph.metadata.pinyin ? 1 : 0;\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    console.log(`Successfully migrated ${migrated} glyphs.`);\n    console.log(`Pulled definitions for ${definition} glyphs.`);\n    console.log(`Pulled pinyin for ${pinyin} glyphs.`);\n  }));\n}\n\n// Runs the given per-glyph callback for each glyph in the database.\n// When all the glyphs are migrated, runs the completion callback.\nconst runMigration = (per_glyph_callback, completion_callback) => {\n  console.log('Running migration...');\n  if (per_glyph_callback) {\n    const codepoints =\n        Glyphs.find({}, {fields: {codepoint: 1}, sort: {codepoint: 1}}).fetch();\n    for (let i = 0; i < codepoints.length; i++) {\n      const glyph = Glyphs.findOne({codepoint: codepoints[i].codepoint});\n      assert(glyph, 'Glyphs changed during migration!');\n      per_glyph_callback(glyph);\n      if ((i + 1) % 1000 === 0) {\n        console.log(`Migrated ${i + 1} glyphs.`);\n      }\n    }\n  }\n  if (completion_callback) {\n    completion_callback();\n  }\n  console.log('Migration complete.');\n}\n\nMeteor.methods({\n  'export': () => {\n    cjklib.promise.then(Meteor.bindEnvironment(dumpToNewSchemaJSON))\n                  .catch(console.error.bind(console));\n  },\n  'exportSVGs': exportSVGs,\n  'loadFromOldSchemaJSON': (filename) => {\n    cjklib.promise.then(\n        Meteor.bindEnvironment(() => loadFromOldSchemaJSON(filename)))\n                  .catch(console.error.bind(console));\n  },\n});\n\nMeteor.startup(() => {\n  SSR.compileTemplate('animation', Assets.getText('animation.html'));\n  const completion_callback = undefined;\n  const per_glyph_callback = undefined;\n  if (!per_glyph_callback && !completion_callback) {\n    return;\n  }\n  console.log('Preparing for migration...');\n  const migration = () => runMigration(per_glyph_callback, completion_callback);\n  cjklib.promise.then(Meteor.bindEnvironment(migration))\n                .catch(console.error.bind(console));\n});\n"]},"sourceType":"module","externalDependencies":{},"hash":"bc2e7c2b925346ac7cf9914957bc44449de39599"}
