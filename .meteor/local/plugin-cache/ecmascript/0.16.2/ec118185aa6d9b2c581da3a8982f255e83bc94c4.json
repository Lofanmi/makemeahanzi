{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/lib/stroke_caps/utils.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"lib/stroke_caps/utils.js","filename":"/Users/a37/code/github/makemeahanzi-tool/lib/stroke_caps/utils.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/lib/stroke_caps/utils.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/stroke_caps/utils.js"}},"code":"!function (module1) {\n  const svgPathUtils = require('point-at-length');\n\n  const dist = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n\n  const norm = vect => dist(vect, {\n    x: 0,\n    y: 0\n  });\n\n  const subtract = (p1, p2) => ({\n    x: p1.x - p2.x,\n    y: p1.y - p2.y\n  });\n\n  const ptEq = (p1, p2) => p1.x === p2.x && p1.y === p2.y;\n\n  const getOutlinePoints = function (pathString) {\n    let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    const path = svgPathUtils(pathString);\n    const delta = path.length() / count;\n    const outline = [];\n\n    for (let i = 0; i < count; i += 1) {\n      const svgPoint = path.at(i * delta);\n      outline.push({\n        x: svgPoint[0],\n        y: svgPoint[1]\n      });\n    }\n\n    return outline;\n  }; // get the intersection point of 2 lines defined by 2 points each\n  // from https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n\n\n  const getLinesIntersectPoint = (l1p1, l1p2, l2p1, l2p2) => {\n    const x1 = l1p1.x;\n    const x2 = l1p2.x;\n    const x3 = l2p1.x;\n    const x4 = l2p2.x;\n    const y1 = l1p1.y;\n    const y2 = l1p2.y;\n    const y3 = l2p1.y;\n    const y4 = l2p2.y;\n    const xNumerator = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n    const yNumerator = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n    const denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    return {\n      x: xNumerator / denominator,\n      y: yNumerator / denominator\n    };\n  };\n\n  const getPointIndex = (point, pathOutline) => {\n    const dists = pathOutline.map(outlinePoint => dist(point, outlinePoint));\n    const min = Math.min(...dists);\n    return dists.indexOf(min);\n  };\n\n  const getIndexAtDelta = (index, delta, pathOutline) => {\n    return (pathOutline.length + index + delta) % pathOutline.length;\n  };\n\n  const getCosSimAroundPoint = (point, pathOutline) => {\n    // if this is 1, the point is on a flat line.\n    const pointIndex = getPointIndex(point, pathOutline);\n    const preIndex = getIndexAtDelta(pointIndex, -3, pathOutline);\n    const postIndex = getIndexAtDelta(pointIndex, 3, pathOutline);\n    const vect1 = subtract(pathOutline[pointIndex], pathOutline[preIndex]);\n    const vect2 = subtract(pathOutline[postIndex], pathOutline[pointIndex]);\n    return (vect1.x * vect2.x + vect1.y * vect2.y) / (norm(vect1) * norm(vect2));\n  }; // return a new point, p3, which is on the same line as p1 and p2, but distance away\n  // from p2. p1, p2, p3 will always lie on the line in that order\n\n\n  const extendPointOnLine = (p1, p2, distance) => {\n    const vect = subtract(p2, p1);\n    const mag = distance / norm(vect);\n    return {\n      x: p2.x + mag * vect.x,\n      y: p2.y + mag * vect.y\n    };\n  };\n\n  const distToPath = (point, pathOutline) => {\n    const dists = pathOutline.map(outlinePoint => dist(point, outlinePoint));\n    return Math.min(...dists);\n  };\n\n  const roundPathPoints = pathString => {\n    const floats = pathString.match(/\\d+\\.\\d+/ig);\n    if (!floats) return pathString;\n    let fixedPathString = pathString;\n    floats.forEach(float => {\n      fixedPathString = fixedPathString.replace(float, Math.round(parseFloat(float)));\n    });\n    return fixedPathString;\n  };\n\n  const estimateTanPoints = (pathOutline, clipPoints) => {\n    const cpIndex0 = getPointIndex(clipPoints[0], pathOutline);\n    const cpIndex1 = getPointIndex(clipPoints[1], pathOutline);\n    return [pathOutline[getIndexAtDelta(cpIndex0, -15, pathOutline)], pathOutline[getIndexAtDelta(cpIndex1, 15, pathOutline)]];\n  };\n\n  module.exports = {\n    distToPath,\n    getCosSimAroundPoint,\n    getOutlinePoints,\n    getLinesIntersectPoint,\n    extendPointOnLine,\n    estimateTanPoints,\n    dist,\n    ptEq,\n    roundPathPoints\n  };\n}.call(this, module);","map":{"version":3,"sources":["lib/stroke_caps/utils.js"],"names":["svgPathUtils","require","dist","p1","p2","Math","sqrt","pow","x","y","norm","vect","subtract","ptEq","getOutlinePoints","pathString","count","path","delta","length","outline","i","svgPoint","at","push","getLinesIntersectPoint","l1p1","l1p2","l2p1","l2p2","x1","x2","x3","x4","y1","y2","y3","y4","xNumerator","yNumerator","denominator","getPointIndex","point","pathOutline","dists","map","outlinePoint","min","indexOf","getIndexAtDelta","index","getCosSimAroundPoint","pointIndex","preIndex","postIndex","vect1","vect2","extendPointOnLine","distance","mag","distToPath","roundPathPoints","floats","match","fixedPathString","forEach","float","replace","round","parseFloat","estimateTanPoints","clipPoints","cpIndex0","cpIndex1","module","exports"],"mappings":"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","sourcesContent":["const svgPathUtils = require('point-at-length');\n\nconst dist = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\nconst norm = (vect) => dist(vect, {x: 0, y: 0});\nconst subtract = (p1, p2) => ({x: p1.x - p2.x, y: p1.y - p2.y});\nconst ptEq = (p1, p2) => p1.x === p2.x && p1.y === p2.y;\n\nconst getOutlinePoints = (pathString, count = 1000) => {\n  const path = svgPathUtils(pathString);\n  const delta = path.length() / count;\n  const outline = [];\n  for (let i = 0; i < count; i += 1) {\n    const svgPoint = path.at(i * delta);\n    outline.push({x: svgPoint[0], y: svgPoint[1]});\n  }\n  return outline;\n};\n\n// get the intersection point of 2 lines defined by 2 points each\n// from https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\nconst getLinesIntersectPoint = (l1p1, l1p2, l2p1, l2p2) => {\n  const x1 = l1p1.x;\n  const x2 = l1p2.x;\n  const x3 = l2p1.x;\n  const x4 = l2p2.x;\n  const y1 = l1p1.y;\n  const y2 = l1p2.y;\n  const y3 = l2p1.y;\n  const y4 = l2p2.y;\n  const xNumerator = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n  const yNumerator = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n  const denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n  return {x: xNumerator / denominator, y: yNumerator / denominator};\n};\n\nconst getPointIndex = (point, pathOutline) => {\n  const dists = pathOutline.map(outlinePoint => dist(point, outlinePoint));\n  const min = Math.min(...dists);\n  return dists.indexOf(min);\n};\n\nconst getIndexAtDelta = (index, delta, pathOutline) => {\n  return (pathOutline.length + index + delta) % pathOutline.length;\n};\n\nconst getCosSimAroundPoint = (point, pathOutline) => {\n  // if this is 1, the point is on a flat line.\n  const pointIndex = getPointIndex(point, pathOutline);\n  const preIndex = getIndexAtDelta(pointIndex, -3, pathOutline);\n  const postIndex = getIndexAtDelta(pointIndex, 3, pathOutline);\n  const vect1 = subtract(pathOutline[pointIndex], pathOutline[preIndex]);\n  const vect2 = subtract(pathOutline[postIndex], pathOutline[pointIndex]);\n  return (vect1.x * vect2.x + vect1.y * vect2.y) / (norm(vect1) * norm(vect2));\n};\n\n// return a new point, p3, which is on the same line as p1 and p2, but distance away\n// from p2. p1, p2, p3 will always lie on the line in that order\nconst extendPointOnLine = (p1, p2, distance) => {\n  const vect = subtract(p2, p1);\n  const mag = distance / norm(vect);\n  return {x: p2.x + mag * vect.x, y: p2.y + mag * vect.y};\n};\n\nconst distToPath = (point, pathOutline) => {\n  const dists = pathOutline.map(outlinePoint => dist(point, outlinePoint));\n  return Math.min(...dists);\n};\n\nconst roundPathPoints = (pathString) => {\n  const floats = pathString.match(/\\d+\\.\\d+/ig);\n  if (!floats) return pathString;\n  let fixedPathString = pathString;\n  floats.forEach(float => {\n    fixedPathString = fixedPathString.replace(float, Math.round(parseFloat(float)));\n  });\n  return fixedPathString;\n};\n\nconst estimateTanPoints = (pathOutline, clipPoints) => {\n  const cpIndex0 = getPointIndex(clipPoints[0], pathOutline);\n  const cpIndex1 = getPointIndex(clipPoints[1], pathOutline);\n  return [\n    pathOutline[getIndexAtDelta(cpIndex0, -15, pathOutline)],\n    pathOutline[getIndexAtDelta(cpIndex1, 15, pathOutline)],\n  ];\n};\n\nmodule.exports = {\n  distToPath,\n  getCosSimAroundPoint,\n  getOutlinePoints,\n  getLinesIntersectPoint,\n  extendPointOnLine,\n  estimateTanPoints,\n  dist,\n  ptEq,\n  roundPathPoints,\n};\n"]},"sourceType":"module","externalDependencies":{},"hash":"ec118185aa6d9b2c581da3a8982f255e83bc94c4"}
