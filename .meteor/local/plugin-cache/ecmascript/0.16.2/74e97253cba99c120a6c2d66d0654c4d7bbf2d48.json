{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/lib/stroke_caps/utils.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"lib/stroke_caps/utils.js","filename":"/Users/a37/code/github/makemeahanzi-tool/lib/stroke_caps/utils.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/lib/stroke_caps/utils.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/stroke_caps/utils.js"}},"code":"!function (module1) {\n  var _toConsumableArray;\n\n  module1.link(\"@babel/runtime/helpers/toConsumableArray\", {\n    default: function (v) {\n      _toConsumableArray = v;\n    }\n  }, 0);\n\n  var svgPathUtils = require('point-at-length');\n\n  var dist = function (p1, p2) {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n  };\n\n  var norm = function (vect) {\n    return dist(vect, {\n      x: 0,\n      y: 0\n    });\n  };\n\n  var subtract = function (p1, p2) {\n    return {\n      x: p1.x - p2.x,\n      y: p1.y - p2.y\n    };\n  };\n\n  var ptEq = function (p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n  };\n\n  var getOutlinePoints = function (pathString) {\n    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    var path = svgPathUtils(pathString);\n    var delta = path.length() / count;\n    var outline = [];\n\n    for (var i = 0; i < count; i += 1) {\n      var svgPoint = path.at(i * delta);\n      outline.push({\n        x: svgPoint[0],\n        y: svgPoint[1]\n      });\n    }\n\n    return outline;\n  }; // get the intersection point of 2 lines defined by 2 points each\n  // from https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\n\n\n  var getLinesIntersectPoint = function (l1p1, l1p2, l2p1, l2p2) {\n    var x1 = l1p1.x;\n    var x2 = l1p2.x;\n    var x3 = l2p1.x;\n    var x4 = l2p2.x;\n    var y1 = l1p1.y;\n    var y2 = l1p2.y;\n    var y3 = l2p1.y;\n    var y4 = l2p2.y;\n    var xNumerator = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n    var yNumerator = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n    var denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    return {\n      x: xNumerator / denominator,\n      y: yNumerator / denominator\n    };\n  };\n\n  var getPointIndex = function (point, pathOutline) {\n    var dists = pathOutline.map(function (outlinePoint) {\n      return dist(point, outlinePoint);\n    });\n    var min = Math.min.apply(Math, _toConsumableArray(dists));\n    return dists.indexOf(min);\n  };\n\n  var getIndexAtDelta = function (index, delta, pathOutline) {\n    return (pathOutline.length + index + delta) % pathOutline.length;\n  };\n\n  var getCosSimAroundPoint = function (point, pathOutline) {\n    // if this is 1, the point is on a flat line.\n    var pointIndex = getPointIndex(point, pathOutline);\n    var preIndex = getIndexAtDelta(pointIndex, -3, pathOutline);\n    var postIndex = getIndexAtDelta(pointIndex, 3, pathOutline);\n    var vect1 = subtract(pathOutline[pointIndex], pathOutline[preIndex]);\n    var vect2 = subtract(pathOutline[postIndex], pathOutline[pointIndex]);\n    return (vect1.x * vect2.x + vect1.y * vect2.y) / (norm(vect1) * norm(vect2));\n  }; // return a new point, p3, which is on the same line as p1 and p2, but distance away\n  // from p2. p1, p2, p3 will always lie on the line in that order\n\n\n  var extendPointOnLine = function (p1, p2, distance) {\n    var vect = subtract(p2, p1);\n    var mag = distance / norm(vect);\n    return {\n      x: p2.x + mag * vect.x,\n      y: p2.y + mag * vect.y\n    };\n  };\n\n  var distToPath = function (point, pathOutline) {\n    var dists = pathOutline.map(function (outlinePoint) {\n      return dist(point, outlinePoint);\n    });\n    return Math.min.apply(Math, _toConsumableArray(dists));\n  };\n\n  var roundPathPoints = function (pathString) {\n    var floats = pathString.match(/\\d+\\.\\d+/ig);\n    if (!floats) return pathString;\n    var fixedPathString = pathString;\n    floats.forEach(function (float) {\n      fixedPathString = fixedPathString.replace(float, Math.round(parseFloat(float)));\n    });\n    return fixedPathString;\n  };\n\n  var estimateTanPoints = function (pathOutline, clipPoints) {\n    var cpIndex0 = getPointIndex(clipPoints[0], pathOutline);\n    var cpIndex1 = getPointIndex(clipPoints[1], pathOutline);\n    return [pathOutline[getIndexAtDelta(cpIndex0, -15, pathOutline)], pathOutline[getIndexAtDelta(cpIndex1, 15, pathOutline)]];\n  };\n\n  module.exports = {\n    distToPath: distToPath,\n    getCosSimAroundPoint: getCosSimAroundPoint,\n    getOutlinePoints: getOutlinePoints,\n    getLinesIntersectPoint: getLinesIntersectPoint,\n    extendPointOnLine: extendPointOnLine,\n    estimateTanPoints: estimateTanPoints,\n    dist: dist,\n    ptEq: ptEq,\n    roundPathPoints: roundPathPoints\n  };\n}.call(this, module);","map":{"version":3,"sources":["lib/stroke_caps/utils.js"],"names":["_toConsumableArray","module1","link","default","v","svgPathUtils","require","dist","p1","p2","Math","sqrt","pow","x","y","norm","vect","subtract","ptEq","getOutlinePoints","pathString","count","path","delta","length","outline","i","svgPoint","at","push","getLinesIntersectPoint","l1p1","l1p2","l2p1","l2p2","x1","x2","x3","x4","y1","y2","y3","y4","xNumerator","yNumerator","denominator","getPointIndex","point","pathOutline","dists","map","outlinePoint","min","indexOf","getIndexAtDelta","index","getCosSimAroundPoint","pointIndex","preIndex","postIndex","vect1","vect2","extendPointOnLine","distance","mag","distToPath","roundPathPoints","floats","match","fixedPathString","forEach","float","replace","round","parseFloat","estimateTanPoints","clipPoints","cpIndex0","cpIndex1","module","exports"],"mappings":"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","sourcesContent":["const svgPathUtils = require('point-at-length');\n\nconst dist = (p1, p2) => Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\nconst norm = (vect) => dist(vect, {x: 0, y: 0});\nconst subtract = (p1, p2) => ({x: p1.x - p2.x, y: p1.y - p2.y});\nconst ptEq = (p1, p2) => p1.x === p2.x && p1.y === p2.y;\n\nconst getOutlinePoints = (pathString, count = 1000) => {\n  const path = svgPathUtils(pathString);\n  const delta = path.length() / count;\n  const outline = [];\n  for (let i = 0; i < count; i += 1) {\n    const svgPoint = path.at(i * delta);\n    outline.push({x: svgPoint[0], y: svgPoint[1]});\n  }\n  return outline;\n};\n\n// get the intersection point of 2 lines defined by 2 points each\n// from https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\nconst getLinesIntersectPoint = (l1p1, l1p2, l2p1, l2p2) => {\n  const x1 = l1p1.x;\n  const x2 = l1p2.x;\n  const x3 = l2p1.x;\n  const x4 = l2p2.x;\n  const y1 = l1p1.y;\n  const y2 = l1p2.y;\n  const y3 = l2p1.y;\n  const y4 = l2p2.y;\n  const xNumerator = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n  const yNumerator = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n  const denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n  return {x: xNumerator / denominator, y: yNumerator / denominator};\n};\n\nconst getPointIndex = (point, pathOutline) => {\n  const dists = pathOutline.map(outlinePoint => dist(point, outlinePoint));\n  const min = Math.min(...dists);\n  return dists.indexOf(min);\n};\n\nconst getIndexAtDelta = (index, delta, pathOutline) => {\n  return (pathOutline.length + index + delta) % pathOutline.length;\n};\n\nconst getCosSimAroundPoint = (point, pathOutline) => {\n  // if this is 1, the point is on a flat line.\n  const pointIndex = getPointIndex(point, pathOutline);\n  const preIndex = getIndexAtDelta(pointIndex, -3, pathOutline);\n  const postIndex = getIndexAtDelta(pointIndex, 3, pathOutline);\n  const vect1 = subtract(pathOutline[pointIndex], pathOutline[preIndex]);\n  const vect2 = subtract(pathOutline[postIndex], pathOutline[pointIndex]);\n  return (vect1.x * vect2.x + vect1.y * vect2.y) / (norm(vect1) * norm(vect2));\n};\n\n// return a new point, p3, which is on the same line as p1 and p2, but distance away\n// from p2. p1, p2, p3 will always lie on the line in that order\nconst extendPointOnLine = (p1, p2, distance) => {\n  const vect = subtract(p2, p1);\n  const mag = distance / norm(vect);\n  return {x: p2.x + mag * vect.x, y: p2.y + mag * vect.y};\n};\n\nconst distToPath = (point, pathOutline) => {\n  const dists = pathOutline.map(outlinePoint => dist(point, outlinePoint));\n  return Math.min(...dists);\n};\n\nconst roundPathPoints = (pathString) => {\n  const floats = pathString.match(/\\d+\\.\\d+/ig);\n  if (!floats) return pathString;\n  let fixedPathString = pathString;\n  floats.forEach(float => {\n    fixedPathString = fixedPathString.replace(float, Math.round(parseFloat(float)));\n  });\n  return fixedPathString;\n};\n\nconst estimateTanPoints = (pathOutline, clipPoints) => {\n  const cpIndex0 = getPointIndex(clipPoints[0], pathOutline);\n  const cpIndex1 = getPointIndex(clipPoints[1], pathOutline);\n  return [\n    pathOutline[getIndexAtDelta(cpIndex0, -15, pathOutline)],\n    pathOutline[getIndexAtDelta(cpIndex1, 15, pathOutline)],\n  ];\n};\n\nmodule.exports = {\n  distToPath,\n  getCosSimAroundPoint,\n  getOutlinePoints,\n  getLinesIntersectPoint,\n  extendPointOnLine,\n  estimateTanPoints,\n  dist,\n  ptEq,\n  roundPathPoints,\n};\n"]},"sourceType":"module","externalDependencies":{},"hash":"74e97253cba99c120a6c2d66d0654c4d7bbf2d48"}
