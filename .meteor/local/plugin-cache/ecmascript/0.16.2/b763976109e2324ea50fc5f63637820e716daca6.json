{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/client/lib/abstract.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/abstract.js","filename":"/Users/a37/code/github/makemeahanzi-tool/client/lib/abstract.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/client/lib/abstract.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/abstract.js"}},"code":"module.export({\n  AbstractStage: () => AbstractStage\n});\nlet assert;\nmodule.link(\"/lib/base\", {\n  assert(v) {\n    assert = v;\n  }\n\n}, 0);\n\n// Each stage is supposed to compute a particular field for the glyph.\n// It computes an initial value for this field based only on previous stages,\n// then exposes a UI for manual correction of its output.\n//\n// NOTE: No stage methods should update the glyph. The framework will do so by\n// calling getStageOutput when appropriate.\nclass AbstractStage {\n  // Initialize this stage's values based only off previous stages. Then, if the\n  // glyph already has a value for this stage's field and it is possible to set\n  // up the internal state of this stage to achieve that value, set that state.\n  // This piece allows the user to resume editing a glyph.\n  //\n  // Typically, a stage will maintain a 'this.original' variable containing the\n  // value without any manual edits and a 'this.adjusted' variable containing\n  // the value with manual edits.\n  constructor(glyph) {\n    // The super constructor should be passed a type, but subclass constructors\n    // will be passed a glyph instead, hence the variable name discrepancy.\n    this.type = glyph;\n    this.colors = ['#0074D9', '#2ECC40', '#FFDC00', '#FF4136', '#7FDBFF', '#001F3F', '#39CCCC', '#3D9970', '#01FF70', '#FF851B']; // Session variables the interface by which the stage interacts with UI:\n    //   - type - String type of this stage.\n    //   - paths - list of dicts with keys in [cls, d, fill, stroke].\n    //   - lines - list of dicts with keys in [cls, stroke, x1, y1, x2, y2].\n    //   - points - list of dicts with keys in [cls, cx, cy, fill, stroke].\n    //   - status - list of dicts with keys in [cls, message] to log.\n    //\n    // The class name 'selectable' is special for paths, lines, and points.\n    // Including this class in cls for those objects will make them interactive\n    // and will trigger the onClick callback when they are clicked.\n\n    Session.set('stage.type', this.type);\n    Session.set('stage.paths', undefined);\n    Session.set('stage.lines', undefined);\n    Session.set('stage.points', undefined);\n    Session.set('stage.status', undefined); // Only used for the verified stage. This variable should be a list of\n    // objects with the following keys:\n    //   - clip - a unique id for the given stroke.\n    //   - stroke - the actual stroke path.\n    //   - median - the path along just the median.\n    //   - length - the total length of the median.\n    //   - advance - the length left along the median. 0 when complete.\n\n    Session.set('stage.animations', undefined);\n  } // Returns true if the difference between the two outputs is significant\n  // enough that the output from all later stages must be erased. By default,\n  // we return true to be safe. We should be very careful when returning false.\n\n\n  clearLaterStages(output1, output2) {\n    return true;\n  } // Return this stage's value based on current internal state. The default\n  // implementation works for stages that follow the 'original/adjusted'\n  // convention described in the constructor.\n\n\n  getStageOutput() {\n    return this.adjusted;\n  } // Update the stage's internal state based on the event.\n\n\n  handleEvent(event, template) {\n    assert(false, 'handleEvent was not implemented!');\n  } // Refresh the stage UI based on the current state of this stage and the\n  // glyph's character and current metadata.\n\n\n  refreshUI(character, metadata) {\n    assert(false, 'refresh was not implemented!');\n  } // Throws an error if there is an issue with this stage's output. The default\n  // implementation simply checks that none of the log lines are errors.\n\n\n  validate() {\n    const log = Session.get('stage.status');\n    assert(log && log.filter(x => x.cls === 'error').length === 0);\n  }\n\n}","map":{"version":3,"sources":["client/lib/abstract.js"],"names":["module","export","AbstractStage","assert","link","v","constructor","glyph","type","colors","Session","set","undefined","clearLaterStages","output1","output2","getStageOutput","adjusted","handleEvent","event","template","refreshUI","character","metadata","validate","log","get","filter","x","cls","length"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,aAAa,EAAC,MAAIA;AAAnB,CAAd;AAAiD,IAAIC,MAAJ;AAAWH,MAAM,CAACI,IAAP,CAAY,WAAZ,EAAwB;AAACD,EAAAA,MAAM,CAACE,CAAD,EAAG;AAACF,IAAAA,MAAM,GAACE,CAAP;AAAS;;AAApB,CAAxB,EAA8C,CAA9C;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMH,aAAN,CAAoB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACA;AACA,SAAKC,IAAL,GAAYD,KAAZ;AACA,SAAKE,MAAL,GAAc,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EACC,SADD,EACY,SADZ,EACuB,SADvB,EACkC,SADlC,EAC6C,SAD7C,CAAd,CAJiB,CAMjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKH,IAA/B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,SAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,SAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,SAA5B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,SAA5B,EApBiB,CAqBjB;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,SAAhC;AACD,GAtCiB,CAuClB;AACA;AACA;;;AACAC,EAAAA,gBAAgB,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACjC,WAAO,IAAP;AACD,GA5CiB,CA6ClB;AACA;AACA;;;AACAC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKC,QAAZ;AACD,GAlDiB,CAmDlB;;;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC3BjB,IAAAA,MAAM,CAAC,KAAD,EAAQ,kCAAR,CAAN;AACD,GAtDiB,CAuDlB;AACA;;;AACAkB,EAAAA,SAAS,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAC7BpB,IAAAA,MAAM,CAAC,KAAD,EAAQ,8BAAR,CAAN;AACD,GA3DiB,CA4DlB;AACA;;;AACAqB,EAAAA,QAAQ,GAAG;AACT,UAAMC,GAAG,GAAGf,OAAO,CAACgB,GAAR,CAAY,cAAZ,CAAZ;AACAvB,IAAAA,MAAM,CAACsB,GAAG,IAAIA,GAAG,CAACE,MAAJ,CAAYC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAU,OAA5B,EAAqCC,MAArC,KAAgD,CAAxD,CAAN;AACD;;AAjEiB","sourcesContent":["import {assert} from '/lib/base';\n\n// Each stage is supposed to compute a particular field for the glyph.\n// It computes an initial value for this field based only on previous stages,\n// then exposes a UI for manual correction of its output.\n//\n// NOTE: No stage methods should update the glyph. The framework will do so by\n// calling getStageOutput when appropriate.\nclass AbstractStage {\n  // Initialize this stage's values based only off previous stages. Then, if the\n  // glyph already has a value for this stage's field and it is possible to set\n  // up the internal state of this stage to achieve that value, set that state.\n  // This piece allows the user to resume editing a glyph.\n  //\n  // Typically, a stage will maintain a 'this.original' variable containing the\n  // value without any manual edits and a 'this.adjusted' variable containing\n  // the value with manual edits.\n  constructor(glyph) {\n    // The super constructor should be passed a type, but subclass constructors\n    // will be passed a glyph instead, hence the variable name discrepancy.\n    this.type = glyph;\n    this.colors = ['#0074D9', '#2ECC40', '#FFDC00', '#FF4136', '#7FDBFF',\n                   '#001F3F', '#39CCCC', '#3D9970', '#01FF70', '#FF851B'];\n    // Session variables the interface by which the stage interacts with UI:\n    //   - type - String type of this stage.\n    //   - paths - list of dicts with keys in [cls, d, fill, stroke].\n    //   - lines - list of dicts with keys in [cls, stroke, x1, y1, x2, y2].\n    //   - points - list of dicts with keys in [cls, cx, cy, fill, stroke].\n    //   - status - list of dicts with keys in [cls, message] to log.\n    //\n    // The class name 'selectable' is special for paths, lines, and points.\n    // Including this class in cls for those objects will make them interactive\n    // and will trigger the onClick callback when they are clicked.\n    Session.set('stage.type', this.type);\n    Session.set('stage.paths', undefined);\n    Session.set('stage.lines', undefined);\n    Session.set('stage.points', undefined);\n    Session.set('stage.status', undefined);\n    // Only used for the verified stage. This variable should be a list of\n    // objects with the following keys:\n    //   - clip - a unique id for the given stroke.\n    //   - stroke - the actual stroke path.\n    //   - median - the path along just the median.\n    //   - length - the total length of the median.\n    //   - advance - the length left along the median. 0 when complete.\n    Session.set('stage.animations', undefined);\n  }\n  // Returns true if the difference between the two outputs is significant\n  // enough that the output from all later stages must be erased. By default,\n  // we return true to be safe. We should be very careful when returning false.\n  clearLaterStages(output1, output2) {\n    return true;\n  }\n  // Return this stage's value based on current internal state. The default\n  // implementation works for stages that follow the 'original/adjusted'\n  // convention described in the constructor.\n  getStageOutput() {\n    return this.adjusted;\n  }\n  // Update the stage's internal state based on the event.\n  handleEvent(event, template) {\n    assert(false, 'handleEvent was not implemented!');\n  }\n  // Refresh the stage UI based on the current state of this stage and the\n  // glyph's character and current metadata.\n  refreshUI(character, metadata) {\n    assert(false, 'refresh was not implemented!');\n  }\n  // Throws an error if there is an issue with this stage's output. The default\n  // implementation simply checks that none of the log lines are errors.\n  validate() {\n    const log = Session.get('stage.status');\n    assert(log && log.filter((x) => x.cls === 'error').length === 0);\n  }\n}\n\nexport {AbstractStage};\n"]},"sourceType":"module","externalDependencies":{},"hash":"b763976109e2324ea50fc5f63637820e716daca6"}
