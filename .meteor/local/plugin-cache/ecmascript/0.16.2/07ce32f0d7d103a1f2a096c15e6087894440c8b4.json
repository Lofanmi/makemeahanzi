{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/a37/code/github/makemeahanzi-tool/packages/spacebars-compiler/optimizer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/spacebars-compiler/optimizer.js","filename":"/Users/a37/code/github/makemeahanzi-tool/packages/spacebars-compiler/optimizer.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/a37/code/github/makemeahanzi-tool","root":"/Users/a37/code/github/makemeahanzi-tool","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/a37/code/github/makemeahanzi-tool/packages/spacebars-compiler/optimizer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/spacebars-compiler/optimizer.js"}},"code":"var _typeof;\n\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 0);\nmodule.export({\n  toRaw: function () {\n    return toRaw;\n  },\n  TreeTransformer: function () {\n    return TreeTransformer;\n  },\n  optimize: function () {\n    return optimize;\n  }\n});\nvar HTMLTools;\nmodule.link(\"meteor/html-tools\", {\n  HTMLTools: function (v) {\n    HTMLTools = v;\n  }\n}, 0);\nvar HTML;\nmodule.link(\"meteor/htmljs\", {\n  HTML: function (v) {\n    HTML = v;\n  }\n}, 1);\n\n// Optimize parts of an HTMLjs tree into raw HTML strings when they don't\n// contain template tags.\nvar constant = function (value) {\n  return function () {\n    return value;\n  };\n};\n\nvar OPTIMIZABLE = {\n  NONE: 0,\n  PARTS: 1,\n  FULL: 2\n}; // We can only turn content into an HTML string if it contains no template\n// tags and no \"tricky\" HTML tags.  If we can optimize the entire content\n// into a string, we return OPTIMIZABLE.FULL.  If the we are given an\n// unoptimizable node, we return OPTIMIZABLE.NONE.  If we are given a tree\n// that contains an unoptimizable node somewhere, we return OPTIMIZABLE.PARTS.\n//\n// For example, we always create SVG elements programmatically, since SVG\n// doesn't have innerHTML.  If we are given an SVG element, we return NONE.\n// However, if we are given a big tree that contains SVG somewhere, we\n// return PARTS so that the optimizer can descend into the tree and optimize\n// other parts of it.\n\nvar CanOptimizeVisitor = HTML.Visitor.extend();\nCanOptimizeVisitor.def({\n  visitNull: constant(OPTIMIZABLE.FULL),\n  visitPrimitive: constant(OPTIMIZABLE.FULL),\n  visitComment: constant(OPTIMIZABLE.FULL),\n  visitCharRef: constant(OPTIMIZABLE.FULL),\n  visitRaw: constant(OPTIMIZABLE.FULL),\n  visitObject: constant(OPTIMIZABLE.NONE),\n  visitFunction: constant(OPTIMIZABLE.NONE),\n  visitArray: function (x) {\n    for (var i = 0; i < x.length; i++) {\n      if (this.visit(x[i]) !== OPTIMIZABLE.FULL) return OPTIMIZABLE.PARTS;\n    }\n\n    return OPTIMIZABLE.FULL;\n  },\n  visitTag: function (tag) {\n    var tagName = tag.tagName;\n\n    if (tagName === 'textarea') {\n      // optimizing into a TEXTAREA's RCDATA would require being a little\n      // more clever.\n      return OPTIMIZABLE.NONE;\n    } else if (tagName === 'script') {\n      // script tags don't work when rendered from strings\n      return OPTIMIZABLE.NONE;\n    } else if (!(HTML.isKnownElement(tagName) && !HTML.isKnownSVGElement(tagName))) {\n      // foreign elements like SVG can't be stringified for innerHTML.\n      return OPTIMIZABLE.NONE;\n    } else if (tagName === 'table') {\n      // Avoid ever producing HTML containing `<table><tr>...`, because the\n      // browser will insert a TBODY.  If we just `createElement(\"table\")` and\n      // `createElement(\"tr\")`, on the other hand, no TBODY is necessary\n      // (assuming IE 8+).\n      return OPTIMIZABLE.PARTS;\n    } else if (tagName === 'tr') {\n      return OPTIMIZABLE.PARTS;\n    }\n\n    var children = tag.children;\n\n    for (var i = 0; i < children.length; i++) {\n      if (this.visit(children[i]) !== OPTIMIZABLE.FULL) return OPTIMIZABLE.PARTS;\n    }\n\n    if (this.visitAttributes(tag.attrs) !== OPTIMIZABLE.FULL) return OPTIMIZABLE.PARTS;\n    return OPTIMIZABLE.FULL;\n  },\n  visitAttributes: function (attrs) {\n    if (attrs) {\n      var isArray = HTML.isArray(attrs);\n\n      for (var i = 0; i < (isArray ? attrs.length : 1); i++) {\n        var a = isArray ? attrs[i] : attrs;\n        if (_typeof(a) !== 'object' || a instanceof HTMLTools.TemplateTag) return OPTIMIZABLE.PARTS;\n\n        for (var k in meteorBabelHelpers.sanitizeForInObject(a)) {\n          if (this.visit(a[k]) !== OPTIMIZABLE.FULL) return OPTIMIZABLE.PARTS;\n        }\n      }\n    }\n\n    return OPTIMIZABLE.FULL;\n  }\n});\n\nvar getOptimizability = function (content) {\n  return new CanOptimizeVisitor().visit(content);\n};\n\nfunction toRaw(x) {\n  return HTML.Raw(HTML.toHTML(x));\n}\n\nvar TreeTransformer = HTML.TransformingVisitor.extend();\nTreeTransformer.def({\n  visitAttributes: function (attrs\n  /*, ...*/\n  ) {\n    // pass template tags through by default\n    if (attrs instanceof HTMLTools.TemplateTag) return attrs;\n    return HTML.TransformingVisitor.prototype.visitAttributes.apply(this, arguments);\n  }\n}); // Replace parts of the HTMLjs tree that have no template tags (or\n// tricky HTML tags) with HTML.Raw objects containing raw HTML.\n\nvar OptimizingVisitor = TreeTransformer.extend();\nOptimizingVisitor.def({\n  visitNull: toRaw,\n  visitPrimitive: toRaw,\n  visitComment: toRaw,\n  visitCharRef: toRaw,\n  visitArray: function (array) {\n    var optimizability = getOptimizability(array);\n\n    if (optimizability === OPTIMIZABLE.FULL) {\n      return toRaw(array);\n    } else if (optimizability === OPTIMIZABLE.PARTS) {\n      return TreeTransformer.prototype.visitArray.call(this, array);\n    } else {\n      return array;\n    }\n  },\n  visitTag: function (tag) {\n    var optimizability = getOptimizability(tag);\n\n    if (optimizability === OPTIMIZABLE.FULL) {\n      return toRaw(tag);\n    } else if (optimizability === OPTIMIZABLE.PARTS) {\n      return TreeTransformer.prototype.visitTag.call(this, tag);\n    } else {\n      return tag;\n    }\n  },\n  visitChildren: function (children) {\n    // don't optimize the children array into a Raw object!\n    return TreeTransformer.prototype.visitArray.call(this, children);\n  },\n  visitAttributes: function (attrs) {\n    return attrs;\n  }\n}); // Combine consecutive HTML.Raws.  Remove empty ones.\n\nvar RawCompactingVisitor = TreeTransformer.extend();\nRawCompactingVisitor.def({\n  visitArray: function (array) {\n    var result = [];\n\n    for (var i = 0; i < array.length; i++) {\n      var item = array[i];\n\n      if (item instanceof HTML.Raw && (!item.value || result.length && result[result.length - 1] instanceof HTML.Raw)) {\n        // two cases: item is an empty Raw, or previous item is\n        // a Raw as well.  In the latter case, replace the previous\n        // Raw with a longer one that includes the new Raw.\n        if (item.value) {\n          result[result.length - 1] = HTML.Raw(result[result.length - 1].value + item.value);\n        }\n      } else {\n        result.push(this.visit(item));\n      }\n    }\n\n    return result;\n  }\n}); // Replace pointless Raws like `HTMl.Raw('foo')` that contain no special\n// characters with simple strings.\n\nvar RawReplacingVisitor = TreeTransformer.extend();\nRawReplacingVisitor.def({\n  visitRaw: function (raw) {\n    var html = raw.value;\n\n    if (html.indexOf('&') < 0 && html.indexOf('<') < 0) {\n      return html;\n    } else {\n      return raw;\n    }\n  }\n});\n\nfunction optimize(tree) {\n  tree = new OptimizingVisitor().visit(tree);\n  tree = new RawCompactingVisitor().visit(tree);\n  tree = new RawReplacingVisitor().visit(tree);\n  return tree;\n}","map":{"version":3,"sources":["packages/spacebars-compiler/optimizer.js"],"names":["_typeof","module","link","default","v","export","toRaw","TreeTransformer","optimize","HTMLTools","HTML","constant","value","OPTIMIZABLE","NONE","PARTS","FULL","CanOptimizeVisitor","Visitor","extend","def","visitNull","visitPrimitive","visitComment","visitCharRef","visitRaw","visitObject","visitFunction","visitArray","x","i","length","visit","visitTag","tag","tagName","isKnownElement","isKnownSVGElement","children","visitAttributes","attrs","isArray","a","TemplateTag","k","getOptimizability","content","Raw","toHTML","TransformingVisitor","prototype","apply","arguments","OptimizingVisitor","array","optimizability","call","visitChildren","RawCompactingVisitor","result","item","push","RawReplacingVisitor","raw","html","indexOf","tree"],"mappings":"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","sourcesContent":["import { HTMLTools } from 'meteor/html-tools';\nimport { HTML } from 'meteor/htmljs';\n\n// Optimize parts of an HTMLjs tree into raw HTML strings when they don't\n// contain template tags.\n\nvar constant = function (value) {\n  return function () { return value; };\n};\n\nvar OPTIMIZABLE = {\n  NONE: 0,\n  PARTS: 1,\n  FULL: 2\n};\n\n// We can only turn content into an HTML string if it contains no template\n// tags and no \"tricky\" HTML tags.  If we can optimize the entire content\n// into a string, we return OPTIMIZABLE.FULL.  If the we are given an\n// unoptimizable node, we return OPTIMIZABLE.NONE.  If we are given a tree\n// that contains an unoptimizable node somewhere, we return OPTIMIZABLE.PARTS.\n//\n// For example, we always create SVG elements programmatically, since SVG\n// doesn't have innerHTML.  If we are given an SVG element, we return NONE.\n// However, if we are given a big tree that contains SVG somewhere, we\n// return PARTS so that the optimizer can descend into the tree and optimize\n// other parts of it.\nvar CanOptimizeVisitor = HTML.Visitor.extend();\nCanOptimizeVisitor.def({\n  visitNull: constant(OPTIMIZABLE.FULL),\n  visitPrimitive: constant(OPTIMIZABLE.FULL),\n  visitComment: constant(OPTIMIZABLE.FULL),\n  visitCharRef: constant(OPTIMIZABLE.FULL),\n  visitRaw: constant(OPTIMIZABLE.FULL),\n  visitObject: constant(OPTIMIZABLE.NONE),\n  visitFunction: constant(OPTIMIZABLE.NONE),\n  visitArray: function (x) {\n    for (var i = 0; i < x.length; i++)\n      if (this.visit(x[i]) !== OPTIMIZABLE.FULL)\n        return OPTIMIZABLE.PARTS;\n    return OPTIMIZABLE.FULL;\n  },\n  visitTag: function (tag) {\n    var tagName = tag.tagName;\n    if (tagName === 'textarea') {\n      // optimizing into a TEXTAREA's RCDATA would require being a little\n      // more clever.\n      return OPTIMIZABLE.NONE;\n    } else if (tagName === 'script') {\n      // script tags don't work when rendered from strings\n      return OPTIMIZABLE.NONE;\n    } else if (! (HTML.isKnownElement(tagName) &&\n                  ! HTML.isKnownSVGElement(tagName))) {\n      // foreign elements like SVG can't be stringified for innerHTML.\n      return OPTIMIZABLE.NONE;\n    } else if (tagName === 'table') {\n      // Avoid ever producing HTML containing `<table><tr>...`, because the\n      // browser will insert a TBODY.  If we just `createElement(\"table\")` and\n      // `createElement(\"tr\")`, on the other hand, no TBODY is necessary\n      // (assuming IE 8+).\n      return OPTIMIZABLE.PARTS;\n    } else if (tagName === 'tr'){\n      return OPTIMIZABLE.PARTS;\n    }\n\n    var children = tag.children;\n    for (var i = 0; i < children.length; i++)\n      if (this.visit(children[i]) !== OPTIMIZABLE.FULL)\n        return OPTIMIZABLE.PARTS;\n\n    if (this.visitAttributes(tag.attrs) !== OPTIMIZABLE.FULL)\n      return OPTIMIZABLE.PARTS;\n\n    return OPTIMIZABLE.FULL;\n  },\n  visitAttributes: function (attrs) {\n    if (attrs) {\n      var isArray = HTML.isArray(attrs);\n      for (var i = 0; i < (isArray ? attrs.length : 1); i++) {\n        var a = (isArray ? attrs[i] : attrs);\n        if ((typeof a !== 'object') || (a instanceof HTMLTools.TemplateTag))\n          return OPTIMIZABLE.PARTS;\n        for (var k in a)\n          if (this.visit(a[k]) !== OPTIMIZABLE.FULL)\n            return OPTIMIZABLE.PARTS;\n      }\n    }\n    return OPTIMIZABLE.FULL;\n  }\n});\n\nvar getOptimizability = function (content) {\n  return (new CanOptimizeVisitor).visit(content);\n};\n\nexport function toRaw(x) {\n  return HTML.Raw(HTML.toHTML(x));\n}\n\nexport const TreeTransformer = HTML.TransformingVisitor.extend();\nTreeTransformer.def({\n  visitAttributes: function (attrs/*, ...*/) {\n    // pass template tags through by default\n    if (attrs instanceof HTMLTools.TemplateTag)\n      return attrs;\n\n    return HTML.TransformingVisitor.prototype.visitAttributes.apply(\n      this, arguments);\n  }\n});\n\n// Replace parts of the HTMLjs tree that have no template tags (or\n// tricky HTML tags) with HTML.Raw objects containing raw HTML.\nvar OptimizingVisitor = TreeTransformer.extend();\nOptimizingVisitor.def({\n  visitNull: toRaw,\n  visitPrimitive: toRaw,\n  visitComment: toRaw,\n  visitCharRef: toRaw,\n  visitArray: function (array) {\n    var optimizability = getOptimizability(array);\n    if (optimizability === OPTIMIZABLE.FULL) {\n      return toRaw(array);\n    } else if (optimizability === OPTIMIZABLE.PARTS) {\n      return TreeTransformer.prototype.visitArray.call(this, array);\n    } else {\n      return array;\n    }\n  },\n  visitTag: function (tag) {\n    var optimizability = getOptimizability(tag);\n    if (optimizability === OPTIMIZABLE.FULL) {\n      return toRaw(tag);\n    } else if (optimizability === OPTIMIZABLE.PARTS) {\n      return TreeTransformer.prototype.visitTag.call(this, tag);\n    } else {\n      return tag;\n    }\n  },\n  visitChildren: function (children) {\n    // don't optimize the children array into a Raw object!\n    return TreeTransformer.prototype.visitArray.call(this, children);\n  },\n  visitAttributes: function (attrs) {\n    return attrs;\n  }\n});\n\n// Combine consecutive HTML.Raws.  Remove empty ones.\nvar RawCompactingVisitor = TreeTransformer.extend();\nRawCompactingVisitor.def({\n  visitArray: function (array) {\n    var result = [];\n    for (var i = 0; i < array.length; i++) {\n      var item = array[i];\n      if ((item instanceof HTML.Raw) &&\n          ((! item.value) ||\n           (result.length &&\n            (result[result.length - 1] instanceof HTML.Raw)))) {\n        // two cases: item is an empty Raw, or previous item is\n        // a Raw as well.  In the latter case, replace the previous\n        // Raw with a longer one that includes the new Raw.\n        if (item.value) {\n          result[result.length - 1] = HTML.Raw(\n            result[result.length - 1].value + item.value);\n        }\n      } else {\n        result.push(this.visit(item));\n      }\n    }\n    return result;\n  }\n});\n\n// Replace pointless Raws like `HTMl.Raw('foo')` that contain no special\n// characters with simple strings.\nvar RawReplacingVisitor = TreeTransformer.extend();\nRawReplacingVisitor.def({\n  visitRaw: function (raw) {\n    var html = raw.value;\n    if (html.indexOf('&') < 0 && html.indexOf('<') < 0) {\n      return html;\n    } else {\n      return raw;\n    }\n  }\n});\n\nexport function optimize (tree) {\n  tree = (new OptimizingVisitor).visit(tree);\n  tree = (new RawCompactingVisitor).visit(tree);\n  tree = (new RawReplacingVisitor).visit(tree);\n  return tree;\n}\n"]},"sourceType":"module","externalDependencies":{},"hash":"07ce32f0d7d103a1f2a096c15e6087894440c8b4"}
