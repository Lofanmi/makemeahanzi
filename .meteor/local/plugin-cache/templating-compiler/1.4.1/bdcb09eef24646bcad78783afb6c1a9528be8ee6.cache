{"head":"","body":"","js":"\nTemplate.__checkName(\"path_stage\");\nTemplate[\"path_stage\"] = new Template(\"Template.path_stage\", (function() {\n  var view = this;\n  return [ \"Choose a source for glyph path data for this character:\\n  \", HTML.DIV({\n    class: \"options\"\n  }, \"\\n    \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"options\"));\n  }, function() {\n    return [ \"\\n      \", HTML.A({\n      class: \"option\"\n    }, Blaze.View(\"lookup:label\", function() {\n      return Spacebars.mustache(view.lookup(\"label\"));\n    })), HTML.Raw('\\n      <div class=\"separator\">â€¢</div>\\n    ') ];\n  }), \"\\n  \"), \"\\n  \", HTML.DIV({\n    class: \"alternative\"\n  }, \"\\n    Alternatively, use part of a glyph from another character:\\n    \", Blaze.View(\"lookup:editable\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"editable\"), \"alternative\", view.lookup(\"alternative\")));\n  }), \"\\n  \") ];\n}));\n\nTemplate.__checkName(\"bridges_stage\");\nTemplate[\"bridges_stage\"] = new Template(\"Template.bridges_stage\", (function() {\n  var view = this;\n  return \"Connect each pair of path points such that the segment between those points\\n  is part of some stroke outline. Click on two points to connect them by a\\n  bridge, or click on a bridge to drop it.\";\n}));\n\nTemplate.__checkName(\"strokes_stage\");\nTemplate[\"strokes_stage\"] = new Template(\"Template.strokes_stage\", (function() {\n  var view = this;\n  return \"Select paths to include in the glyph by clicking on them. The final number of\\n  strokes must agree with the stroke count in the character metadata.\";\n}));\n\nTemplate.__checkName(\"analysis_stage\");\nTemplate[\"analysis_stage\"] = new Template(\"Template.analysis_stage\", (function() {\n  var view = this;\n  return [ \"Decompose the character into components, if possible. Additionally, if the\\n  character is a phonetic-semantic compound, mark the components that play each\\n  of those roles.\\n\\n  \", HTML.DIV({\n    class: \"decomposition\"\n  }, \"\\n    \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"decomposition_data\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"tree\"));\n  }), \"\\n  \"), \"\\n  \", HTML.DIV({\n    class: \"radical\"\n  }, HTML.Raw('\\n    <label class=\"control-label\">Radical:</label>\\n    '), Blaze.View(\"lookup:editable\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"editable\"), \"radical\", view.lookup(\"radical\")));\n  }), \"\\n  \"), \"\\n  \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"etymology_data\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"etymology\"));\n  }) ];\n}));\n\nTemplate.__checkName(\"tree\");\nTemplate[\"tree\"] = new Template(\"Template.tree\", (function() {\n  var view = this;\n  return [ HTML.DIV({\n    class: \"tree\",\n    style: function() {\n      return [ \"margin-left: \", Spacebars.mustache(Spacebars.dot(view.lookup(\"path\"), \"length\")), \"em;\" ];\n    }\n  }, \"\\n    \", HTML.SELECT({\n    class: \"form-control subtree-type\"\n  }, \"\\n      \", HTML.OPTION(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"selected\"), view.lookup(\"type\"), \"character\");\n  }), \"Character\"), \"\\n      \", HTML.OPTION(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"selected\"), view.lookup(\"type\"), \"compound\");\n  }), \"Compound\"), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"equals\"), view.lookup(\"type\"), \"character\");\n  }, function() {\n    return [ \"\\n      \", Blaze.View(\"lookup:editable\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"editable\"), \"character\", view.lookup(\"value\")));\n    }), \"\\n      \", Blaze.If(function() {\n      return Spacebars.dataMustache(view.lookup(\"equals\"), view.lookup(\"value\"), \"?\");\n    }, function() {\n      return \"\\n        (unknown)\\n      \";\n    }, function() {\n      return [ \"\\n        \", HTML.A({\n        class: \"link\",\n        href: function() {\n          return [ \"#\", Spacebars.mustache(view.lookup(\"value\")) ];\n        }\n      }, Blaze.View(\"lookup:details\", function() {\n        return Spacebars.mustache(view.lookup(\"details\"), view.lookup(\"value\"));\n      })), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }), \"\\n    \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"equals\"), view.lookup(\"type\"), \"compound\");\n  }, function() {\n    return [ \"\\n      \", HTML.SELECT({\n      class: \"form-control compound-type\"\n    }, \"\\n        \", Blaze.Each(function() {\n      return Spacebars.dataMustache(view.lookup(\"compounds\"), view.lookup(\"value\"));\n    }, function() {\n      return [ \"\\n          \", HTML.OPTION(HTML.Attrs(function() {\n        return Spacebars.attrMustache(view.lookup(\"selected\"), view.lookup(\"value\"), view.lookup(\"compound\"));\n      }), Blaze.View(\"lookup:label\", function() {\n        return Spacebars.mustache(view.lookup(\"label\"));\n      })), \"\\n        \" ];\n    }), \"\\n      \"), \"\\n    \" ];\n  }), \"\\n  \"), \"\\n  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"children\"));\n  }, function() {\n    return [ \"\\n    \", Blaze._TemplateWith(function() {\n      return Spacebars.call(view.lookup(\".\"));\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"tree\"));\n    }), \"\\n  \" ];\n  }) ];\n}));\n\nTemplate.__checkName(\"etymology\");\nTemplate[\"etymology\"] = new Template(\"Template.etymology\", (function() {\n  var view = this;\n  return HTML.DIV({\n    class: \"etymology\"\n  }, HTML.Raw('\\n    <label class=\"control-label\">Etymology:</label>\\n    '), HTML.SELECT({\n    class: \"form-control etymology-type\"\n  }, \"\\n      \", HTML.OPTION(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"selected\"), view.lookup(\"type\"), \"ideographic\");\n  }), \"Ideographic\"), \"\\n      \", HTML.OPTION(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"selected\"), view.lookup(\"type\"), \"pictographic\");\n  }), \"Pictographic\"), \"\\n      \", HTML.OPTION(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"selected\"), view.lookup(\"type\"), \"pictophonetic\");\n  }), \"Pictophonetic\"), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n    return Spacebars.dataMustache(view.lookup(\"equals\"), view.lookup(\"type\"), \"pictophonetic\");\n  }, function() {\n    return [ \"\\n      \", HTML.DIV({\n      class: \"component\"\n    }, \"\\n        \", Blaze.View(\"lookup:editable\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"editable\"), \"semantic\", view.lookup(\"semantic\")));\n    }), \"\\n        (\", Blaze.View(\"lookup:editable\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"editable\"), \"hint\", view.lookup(\"hint\")));\n    }), \") provides the meaning while\\n        \", Blaze.View(\"lookup:editable\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"editable\"), \"phonetic\", view.lookup(\"phonetic\")));\n    }), \" provides the pronunciation.\\n      \"), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n      \", Blaze.View(\"lookup:editable\", function() {\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"editable\"), \"hint\", view.lookup(\"hint\")));\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n\nTemplate.__checkName(\"order_stage\");\nTemplate[\"order_stage\"] = new Template(\"Template.order_stage\", (function() {\n  var view = this;\n  return [ \"Click on the strokes to the right to set the component they belong to.\\n  Then reorder the strokes by clicking and dragging elements in the list below.\\n  \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"components\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      class: \"component\",\n      style: function() {\n        return [ \"top: \", Spacebars.mustache(view.lookup(\"top\")), \";\" ];\n      }\n    }, \"\\n      \", Blaze._TemplateWith(function() {\n      return Spacebars.call(view.lookup(\"glyph\"));\n    }, function() {\n      return Spacebars.include(view.lookupTemplate(\"glyph\"));\n    }), HTML.Raw('\\n      <div class=\"clear\"></div>\\n    ')), \"\\n  \" ];\n  }), \"\\n  \", HTML.DIV({\n    class: \"character\"\n  }, \"\\n    \", Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"character\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"glyph\"));\n  }), \"\\n  \"), \"\\n  \", HTML.DIV({\n    class: \"permutation\"\n  }, \"\\n    \", Blaze._TemplateWith(function() {\n    return {\n      items: Spacebars.call(view.lookup(\"items\")),\n      options: Spacebars.call(view.lookup(\"options\")),\n      sortField: Spacebars.call(\"index\")\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"sortable\"), function() {\n      return [ \"\\n      \", HTML.DIV({\n        class: \"entry\",\n        style: function() {\n          return [ \"background-color: \", Spacebars.mustache(view.lookup(\"background\")), \";\\n                                border-color: \", Spacebars.mustache(view.lookup(\"color\")), \";\" ];\n        }\n      }, HTML.Raw('\\n        <a class=\"reverse\">Reverse</a>\\n        '), HTML.DIV({\n        class: \"small\"\n      }, Blaze._TemplateWith(function() {\n        return Spacebars.call(view.lookup(\"glyph\"));\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"glyph\"));\n      })), HTML.Raw('\\n        <div class=\"clear\"></div>\\n        '), HTML.DIV({\n        class: \"character\"\n      }, Blaze._TemplateWith(function() {\n        return Spacebars.call(view.lookup(\"glyph\"));\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"glyph\"));\n      })), \"\\n      \"), \"\\n    \" ];\n    });\n  }), \"\\n  \") ];\n}));\n\nTemplate.__checkName(\"glyph\");\nTemplate[\"glyph\"] = new Template(\"Template.glyph\", (function() {\n  var view = this;\n  return HTML.SVG({\n    viewBox: \"0 0 1024 1024\"\n  }, \"\\n    \", HTML.DEFS(\"\\n      \", HTML.MARKER({\n    id: \"arrow\",\n    markerWidth: \"4\",\n    markerHeight: \"4\",\n    orient: \"auto\",\n    refX: \"3\",\n    refY: \"2\"\n  }, \"\\n        \", HTML.PATH({\n    d: \"M0,0 L0,4 L4,2 L0,0\",\n    style: \"fill: red;\"\n  }), \"\\n      \"), \"\\n    \"), \"\\n    \", HTML.G({\n    transform: \"scale(1, -1) translate(0, -900)\"\n  }, \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"paths\"));\n  }, function() {\n    return [ \"\\n        \", HTML.PATH({\n      class: function() {\n        return Spacebars.mustache(view.lookup(\"cls\"));\n      },\n      fill: function() {\n        return Spacebars.mustache(view.lookup(\"fill\"));\n      },\n      stroke: function() {\n        return Spacebars.mustache(view.lookup(\"stroke\"));\n      },\n      d: function() {\n        return Spacebars.mustache(view.lookup(\"d\"));\n      }\n    }), \"\\n      \" ];\n  }), \"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"lines\"));\n  }, function() {\n    return [ \"\\n        \", HTML.LINE({\n      x1: function() {\n        return Spacebars.mustache(view.lookup(\"x1\"));\n      },\n      y1: function() {\n        return Spacebars.mustache(view.lookup(\"y1\"));\n      },\n      x2: function() {\n        return Spacebars.mustache(view.lookup(\"x2\"));\n      },\n      y2: function() {\n        return Spacebars.mustache(view.lookup(\"y2\"));\n      }\n    }), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n\nTemplate.__checkName(\"verified_stage\");\nTemplate[\"verified_stage\"] = new Template(\"Template.verified_stage\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return Spacebars.call(view.lookup(\"data\"));\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"animation\"));\n  });\n}));\n","bodyAttrs":{}}