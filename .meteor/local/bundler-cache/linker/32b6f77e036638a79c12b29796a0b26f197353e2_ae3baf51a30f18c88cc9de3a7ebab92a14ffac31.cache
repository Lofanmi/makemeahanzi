[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Template = Package['templating-runtime'].Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Sortable;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/rubaxa_sortable/packages/rubaxa_sortable.js              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/Sortable.js                                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**!                                                                                                                  // 1\n * Sortable                                                                                                           // 2\n * @author\tRubaXa   <trash@rubaxa.org>                                                                                // 3\n * @license MIT                                                                                                       // 4\n */                                                                                                                   // 5\n                                                                                                                      // 6\n                                                                                                                      // 7\n(function (factory) {                                                                                                 // 8\n\t\"use strict\";                                                                                                        // 9\n                                                                                                                      // 10\n\tif (typeof define === \"function\" && define.amd) {                                                                    // 11\n\t\tdefine(factory);                                                                                                    // 12\n\t}                                                                                                                    // 13\n\telse if (typeof module != \"undefined\" && typeof module.exports != \"undefined\") {                                     // 14\n\t\tmodule.exports = factory();                                                                                         // 15\n\t}                                                                                                                    // 16\n\telse if (typeof Package !== \"undefined\") {                                                                           // 17\n\t\tSortable = factory();  // export for Meteor.js                                                                      // 18\n\t}                                                                                                                    // 19\n\telse {                                                                                                               // 20\n\t\t/* jshint sub:true */                                                                                               // 21\n\t\twindow[\"Sortable\"] = factory();                                                                                     // 22\n\t}                                                                                                                    // 23\n})(function () {                                                                                                      // 24\n\t\"use strict\";                                                                                                        // 25\n                                                                                                                      // 26\n\tvar dragEl,                                                                                                          // 27\n\t\tparentEl,                                                                                                           // 28\n\t\tghostEl,                                                                                                            // 29\n\t\tcloneEl,                                                                                                            // 30\n\t\trootEl,                                                                                                             // 31\n\t\tnextEl,                                                                                                             // 32\n                                                                                                                      // 33\n\t\tscrollEl,                                                                                                           // 34\n\t\tscrollParentEl,                                                                                                     // 35\n                                                                                                                      // 36\n\t\tlastEl,                                                                                                             // 37\n\t\tlastCSS,                                                                                                            // 38\n\t\tlastParentCSS,                                                                                                      // 39\n                                                                                                                      // 40\n\t\toldIndex,                                                                                                           // 41\n\t\tnewIndex,                                                                                                           // 42\n                                                                                                                      // 43\n\t\tactiveGroup,                                                                                                        // 44\n\t\tautoScroll = {},                                                                                                    // 45\n                                                                                                                      // 46\n\t\ttapEvt,                                                                                                             // 47\n\t\ttouchEvt,                                                                                                           // 48\n                                                                                                                      // 49\n\t\tmoved,                                                                                                              // 50\n                                                                                                                      // 51\n\t\t/** @const */                                                                                                       // 52\n\t\tRSPACE = /\\s+/g,                                                                                                    // 53\n                                                                                                                      // 54\n\t\texpando = 'Sortable' + (new Date).getTime(),                                                                        // 55\n                                                                                                                      // 56\n\t\twin = window,                                                                                                       // 57\n\t\tdocument = win.document,                                                                                            // 58\n\t\tparseInt = win.parseInt,                                                                                            // 59\n                                                                                                                      // 60\n\t\tsupportDraggable = !!('draggable' in document.createElement('div')),                                                // 61\n\t\tsupportCssPointerEvents = (function (el) {                                                                          // 62\n\t\t\tel = document.createElement('x');                                                                                  // 63\n\t\t\tel.style.cssText = 'pointer-events:auto';                                                                          // 64\n\t\t\treturn el.style.pointerEvents === 'auto';                                                                          // 65\n\t\t})(),                                                                                                               // 66\n                                                                                                                      // 67\n\t\t_silent = false,                                                                                                    // 68\n                                                                                                                      // 69\n\t\tabs = Math.abs,                                                                                                     // 70\n\t\tslice = [].slice,                                                                                                   // 71\n                                                                                                                      // 72\n\t\ttouchDragOverListeners = [],                                                                                        // 73\n                                                                                                                      // 74\n\t\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {                      // 75\n\t\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521                                                        // 76\n\t\t\tif (rootEl && options.scroll) {                                                                                    // 77\n\t\t\t\tvar el,                                                                                                           // 78\n\t\t\t\t\trect,                                                                                                            // 79\n\t\t\t\t\tsens = options.scrollSensitivity,                                                                                // 80\n\t\t\t\t\tspeed = options.scrollSpeed,                                                                                     // 81\n                                                                                                                      // 82\n\t\t\t\t\tx = evt.clientX,                                                                                                 // 83\n\t\t\t\t\ty = evt.clientY,                                                                                                 // 84\n                                                                                                                      // 85\n\t\t\t\t\twinWidth = window.innerWidth,                                                                                    // 86\n\t\t\t\t\twinHeight = window.innerHeight,                                                                                  // 87\n                                                                                                                      // 88\n\t\t\t\t\tvx,                                                                                                              // 89\n\t\t\t\t\tvy                                                                                                               // 90\n\t\t\t\t;                                                                                                                 // 91\n                                                                                                                      // 92\n\t\t\t\t// Delect scrollEl                                                                                                // 93\n\t\t\t\tif (scrollParentEl !== rootEl) {                                                                                  // 94\n\t\t\t\t\tscrollEl = options.scroll;                                                                                       // 95\n\t\t\t\t\tscrollParentEl = rootEl;                                                                                         // 96\n                                                                                                                      // 97\n\t\t\t\t\tif (scrollEl === true) {                                                                                         // 98\n\t\t\t\t\t\tscrollEl = rootEl;                                                                                              // 99\n                                                                                                                      // 100\n\t\t\t\t\t\tdo {                                                                                                            // 101\n\t\t\t\t\t\t\tif ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||                                                           // 102\n\t\t\t\t\t\t\t\t(scrollEl.offsetHeight < scrollEl.scrollHeight)                                                               // 103\n\t\t\t\t\t\t\t) {                                                                                                            // 104\n\t\t\t\t\t\t\t\tbreak;                                                                                                        // 105\n\t\t\t\t\t\t\t}                                                                                                              // 106\n\t\t\t\t\t\t\t/* jshint boss:true */                                                                                         // 107\n\t\t\t\t\t\t} while (scrollEl = scrollEl.parentNode);                                                                       // 108\n\t\t\t\t\t}                                                                                                                // 109\n\t\t\t\t}                                                                                                                 // 110\n                                                                                                                      // 111\n\t\t\t\tif (scrollEl) {                                                                                                   // 112\n\t\t\t\t\tel = scrollEl;                                                                                                   // 113\n\t\t\t\t\trect = scrollEl.getBoundingClientRect();                                                                         // 114\n\t\t\t\t\tvx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);                                               // 115\n\t\t\t\t\tvy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);                                               // 116\n\t\t\t\t}                                                                                                                 // 117\n                                                                                                                      // 118\n                                                                                                                      // 119\n\t\t\t\tif (!(vx || vy)) {                                                                                                // 120\n\t\t\t\t\tvx = (winWidth - x <= sens) - (x <= sens);                                                                       // 121\n\t\t\t\t\tvy = (winHeight - y <= sens) - (y <= sens);                                                                      // 122\n                                                                                                                      // 123\n\t\t\t\t\t/* jshint expr:true */                                                                                           // 124\n\t\t\t\t\t(vx || vy) && (el = win);                                                                                        // 125\n\t\t\t\t}                                                                                                                 // 126\n                                                                                                                      // 127\n                                                                                                                      // 128\n\t\t\t\tif (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {                                       // 129\n\t\t\t\t\tautoScroll.el = el;                                                                                              // 130\n\t\t\t\t\tautoScroll.vx = vx;                                                                                              // 131\n\t\t\t\t\tautoScroll.vy = vy;                                                                                              // 132\n                                                                                                                      // 133\n\t\t\t\t\tclearInterval(autoScroll.pid);                                                                                   // 134\n                                                                                                                      // 135\n\t\t\t\t\tif (el) {                                                                                                        // 136\n\t\t\t\t\t\tautoScroll.pid = setInterval(function () {                                                                      // 137\n\t\t\t\t\t\t\tif (el === win) {                                                                                              // 138\n\t\t\t\t\t\t\t\twin.scrollTo(win.pageXOffset + vx * speed, win.pageYOffset + vy * speed);                                     // 139\n\t\t\t\t\t\t\t} else {                                                                                                       // 140\n\t\t\t\t\t\t\t\tvy && (el.scrollTop += vy * speed);                                                                           // 141\n\t\t\t\t\t\t\t\tvx && (el.scrollLeft += vx * speed);                                                                          // 142\n\t\t\t\t\t\t\t}                                                                                                              // 143\n\t\t\t\t\t\t}, 24);                                                                                                         // 144\n\t\t\t\t\t}                                                                                                                // 145\n\t\t\t\t}                                                                                                                 // 146\n\t\t\t}                                                                                                                  // 147\n\t\t}, 30),                                                                                                             // 148\n                                                                                                                      // 149\n\t\t_prepareGroup = function (options) {                                                                                // 150\n\t\t\tvar group = options.group;                                                                                         // 151\n                                                                                                                      // 152\n\t\t\tif (!group || typeof group != 'object') {                                                                          // 153\n\t\t\t\tgroup = options.group = {name: group};                                                                            // 154\n\t\t\t}                                                                                                                  // 155\n                                                                                                                      // 156\n\t\t\t['pull', 'put'].forEach(function (key) {                                                                           // 157\n\t\t\t\tif (!(key in group)) {                                                                                            // 158\n\t\t\t\t\tgroup[key] = true;                                                                                               // 159\n\t\t\t\t}                                                                                                                 // 160\n\t\t\t});                                                                                                                // 161\n                                                                                                                      // 162\n\t\t\toptions.groups = ' ' + group.name + (group.put.join ? ' ' + group.put.join(' ') : '') + ' ';                       // 163\n\t\t}                                                                                                                   // 164\n\t;                                                                                                                    // 165\n                                                                                                                      // 166\n                                                                                                                      // 167\n                                                                                                                      // 168\n\t/**                                                                                                                  // 169\n\t * @class  Sortable                                                                                                  // 170\n\t * @param  {HTMLElement}  el                                                                                         // 171\n\t * @param  {Object}       [options]                                                                                  // 172\n\t */                                                                                                                  // 173\n\tfunction Sortable(el, options) {                                                                                     // 174\n\t\tif (!(el && el.nodeType && el.nodeType === 1)) {                                                                    // 175\n\t\t\tthrow 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);                                       // 176\n\t\t}                                                                                                                   // 177\n                                                                                                                      // 178\n\t\tthis.el = el; // root element                                                                                       // 179\n\t\tthis.options = options = _extend({}, options);                                                                      // 180\n                                                                                                                      // 181\n                                                                                                                      // 182\n\t\t// Export instance                                                                                                  // 183\n\t\tel[expando] = this;                                                                                                 // 184\n                                                                                                                      // 185\n                                                                                                                      // 186\n\t\t// Default options                                                                                                  // 187\n\t\tvar defaults = {                                                                                                    // 188\n\t\t\tgroup: Math.random(),                                                                                              // 189\n\t\t\tsort: true,                                                                                                        // 190\n\t\t\tdisabled: false,                                                                                                   // 191\n\t\t\tstore: null,                                                                                                       // 192\n\t\t\thandle: null,                                                                                                      // 193\n\t\t\tscroll: true,                                                                                                      // 194\n\t\t\tscrollSensitivity: 30,                                                                                             // 195\n\t\t\tscrollSpeed: 10,                                                                                                   // 196\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',                                                               // 197\n\t\t\tghostClass: 'sortable-ghost',                                                                                      // 198\n\t\t\tchosenClass: 'sortable-chosen',                                                                                    // 199\n\t\t\tignore: 'a, img',                                                                                                  // 200\n\t\t\tfilter: null,                                                                                                      // 201\n\t\t\tanimation: 0,                                                                                                      // 202\n\t\t\tsetData: function (dataTransfer, dragEl) {                                                                         // 203\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);                                                                 // 204\n\t\t\t},                                                                                                                 // 205\n\t\t\tdropBubble: false,                                                                                                 // 206\n\t\t\tdragoverBubble: false,                                                                                             // 207\n\t\t\tdataIdAttr: 'data-id',                                                                                             // 208\n\t\t\tdelay: 0,                                                                                                          // 209\n\t\t\tforceFallback: false,                                                                                              // 210\n\t\t\tfallbackClass: 'sortable-fallback',                                                                                // 211\n\t\t\tfallbackOnBody: false                                                                                              // 212\n\t\t};                                                                                                                  // 213\n                                                                                                                      // 214\n                                                                                                                      // 215\n\t\t// Set default options                                                                                              // 216\n\t\tfor (var name in defaults) {                                                                                        // 217\n\t\t\t!(name in options) && (options[name] = defaults[name]);                                                            // 218\n\t\t}                                                                                                                   // 219\n                                                                                                                      // 220\n\t\t_prepareGroup(options);                                                                                             // 221\n                                                                                                                      // 222\n\t\t// Bind all private methods                                                                                         // 223\n\t\tfor (var fn in this) {                                                                                              // 224\n\t\t\tif (fn.charAt(0) === '_') {                                                                                        // 225\n\t\t\t\tthis[fn] = this[fn].bind(this);                                                                                   // 226\n\t\t\t}                                                                                                                  // 227\n\t\t}                                                                                                                   // 228\n                                                                                                                      // 229\n\t\t// Setup drag mode                                                                                                  // 230\n\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;                                            // 231\n                                                                                                                      // 232\n\t\t// Bind events                                                                                                      // 233\n\t\t_on(el, 'mousedown', this._onTapStart);                                                                             // 234\n\t\t_on(el, 'touchstart', this._onTapStart);                                                                            // 235\n                                                                                                                      // 236\n\t\tif (this.nativeDraggable) {                                                                                         // 237\n\t\t\t_on(el, 'dragover', this);                                                                                         // 238\n\t\t\t_on(el, 'dragenter', this);                                                                                        // 239\n\t\t}                                                                                                                   // 240\n                                                                                                                      // 241\n\t\ttouchDragOverListeners.push(this._onDragOver);                                                                      // 242\n                                                                                                                      // 243\n\t\t// Restore sorting                                                                                                  // 244\n\t\toptions.store && this.sort(options.store.get(this));                                                                // 245\n\t}                                                                                                                    // 246\n                                                                                                                      // 247\n                                                                                                                      // 248\n\tSortable.prototype = /** @lends Sortable.prototype */ {                                                              // 249\n\t\tconstructor: Sortable,                                                                                              // 250\n                                                                                                                      // 251\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {                                                                // 252\n\t\t\tvar _this = this,                                                                                                  // 253\n\t\t\t\tel = this.el,                                                                                                     // 254\n\t\t\t\toptions = this.options,                                                                                           // 255\n\t\t\t\ttype = evt.type,                                                                                                  // 256\n\t\t\t\ttouch = evt.touches && evt.touches[0],                                                                            // 257\n\t\t\t\ttarget = (touch || evt).target,                                                                                   // 258\n\t\t\t\toriginalTarget = target,                                                                                          // 259\n\t\t\t\tfilter = options.filter;                                                                                          // 260\n                                                                                                                      // 261\n                                                                                                                      // 262\n\t\t\tif (type === 'mousedown' && evt.button !== 0 || options.disabled) {                                                // 263\n\t\t\t\treturn; // only left button or enabled                                                                            // 264\n\t\t\t}                                                                                                                  // 265\n                                                                                                                      // 266\n\t\t\ttarget = _closest(target, options.draggable, el);                                                                  // 267\n                                                                                                                      // 268\n\t\t\tif (!target) {                                                                                                     // 269\n\t\t\t\treturn;                                                                                                           // 270\n\t\t\t}                                                                                                                  // 271\n                                                                                                                      // 272\n\t\t\t// get the index of the dragged element within its parent                                                          // 273\n\t\t\toldIndex = _index(target);                                                                                         // 274\n                                                                                                                      // 275\n\t\t\t// Check filter                                                                                                    // 276\n\t\t\tif (typeof filter === 'function') {                                                                                // 277\n\t\t\t\tif (filter.call(this, evt, target, this)) {                                                                       // 278\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, oldIndex);                                           // 279\n\t\t\t\t\tevt.preventDefault();                                                                                            // 280\n\t\t\t\t\treturn; // cancel dnd                                                                                            // 281\n\t\t\t\t}                                                                                                                 // 282\n\t\t\t}                                                                                                                  // 283\n\t\t\telse if (filter) {                                                                                                 // 284\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {                                                             // 285\n\t\t\t\t\tcriteria = _closest(originalTarget, criteria.trim(), el);                                                        // 286\n                                                                                                                      // 287\n\t\t\t\t\tif (criteria) {                                                                                                  // 288\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, oldIndex);                                                // 289\n\t\t\t\t\t\treturn true;                                                                                                    // 290\n\t\t\t\t\t}                                                                                                                // 291\n\t\t\t\t});                                                                                                               // 292\n                                                                                                                      // 293\n\t\t\t\tif (filter) {                                                                                                     // 294\n\t\t\t\t\tevt.preventDefault();                                                                                            // 295\n\t\t\t\t\treturn; // cancel dnd                                                                                            // 296\n\t\t\t\t}                                                                                                                 // 297\n\t\t\t}                                                                                                                  // 298\n                                                                                                                      // 299\n                                                                                                                      // 300\n\t\t\tif (options.handle && !_closest(originalTarget, options.handle, el)) {                                             // 301\n\t\t\t\treturn;                                                                                                           // 302\n\t\t\t}                                                                                                                  // 303\n                                                                                                                      // 304\n                                                                                                                      // 305\n\t\t\t// Prepare `dragstart`                                                                                             // 306\n\t\t\tthis._prepareDragStart(evt, touch, target);                                                                        // 307\n\t\t},                                                                                                                  // 308\n                                                                                                                      // 309\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target) {                        // 310\n\t\t\tvar _this = this,                                                                                                  // 311\n\t\t\t\tel = _this.el,                                                                                                    // 312\n\t\t\t\toptions = _this.options,                                                                                          // 313\n\t\t\t\townerDocument = el.ownerDocument,                                                                                 // 314\n\t\t\t\tdragStartFn;                                                                                                      // 315\n                                                                                                                      // 316\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {                                                             // 317\n\t\t\t\ttapEvt = evt;                                                                                                     // 318\n                                                                                                                      // 319\n\t\t\t\trootEl = el;                                                                                                      // 320\n\t\t\t\tdragEl = target;                                                                                                  // 321\n\t\t\t\tparentEl = dragEl.parentNode;                                                                                     // 322\n\t\t\t\tnextEl = dragEl.nextSibling;                                                                                      // 323\n\t\t\t\tactiveGroup = options.group;                                                                                      // 324\n                                                                                                                      // 325\n\t\t\t\tdragStartFn = function () {                                                                                       // 326\n\t\t\t\t\t// Delayed drag has been triggered                                                                               // 327\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove                                                              // 328\n\t\t\t\t\t_this._disableDelayedDrag();                                                                                     // 329\n                                                                                                                      // 330\n\t\t\t\t\t// Make the element draggable                                                                                    // 331\n\t\t\t\t\tdragEl.draggable = true;                                                                                         // 332\n                                                                                                                      // 333\n\t\t\t\t\t// Chosen item                                                                                                   // 334\n\t\t\t\t\t_toggleClass(dragEl, _this.options.chosenClass, true);                                                           // 335\n                                                                                                                      // 336\n\t\t\t\t\t// Bind the events: dragstart/dragend                                                                            // 337\n\t\t\t\t\t_this._triggerDragStart(touch);                                                                                  // 338\n\t\t\t\t};                                                                                                                // 339\n                                                                                                                      // 340\n\t\t\t\t// Disable \"draggable\"                                                                                            // 341\n\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {                                                           // 342\n\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);                                                               // 343\n\t\t\t\t});                                                                                                               // 344\n                                                                                                                      // 345\n\t\t\t\t_on(ownerDocument, 'mouseup', _this._onDrop);                                                                     // 346\n\t\t\t\t_on(ownerDocument, 'touchend', _this._onDrop);                                                                    // 347\n\t\t\t\t_on(ownerDocument, 'touchcancel', _this._onDrop);                                                                 // 348\n                                                                                                                      // 349\n\t\t\t\tif (options.delay) {                                                                                              // 350\n\t\t\t\t\t// If the user moves the pointer or let go the click or touch                                                    // 351\n\t\t\t\t\t// before the delay has been reached:                                                                            // 352\n\t\t\t\t\t// disable the delayed drag                                                                                      // 353\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);                                                        // 354\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._disableDelayedDrag);                                                       // 355\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);                                                    // 356\n\t\t\t\t\t_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);                                                      // 357\n\t\t\t\t\t_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);                                                      // 358\n                                                                                                                      // 359\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);                                                  // 360\n\t\t\t\t} else {                                                                                                          // 361\n\t\t\t\t\tdragStartFn();                                                                                                   // 362\n\t\t\t\t}                                                                                                                 // 363\n\t\t\t}                                                                                                                  // 364\n\t\t},                                                                                                                  // 365\n                                                                                                                      // 366\n\t\t_disableDelayedDrag: function () {                                                                                  // 367\n\t\t\tvar ownerDocument = this.el.ownerDocument;                                                                         // 368\n                                                                                                                      // 369\n\t\t\tclearTimeout(this._dragStartTimer);                                                                                // 370\n\t\t\t_off(ownerDocument, 'mouseup', this._disableDelayedDrag);                                                          // 371\n\t\t\t_off(ownerDocument, 'touchend', this._disableDelayedDrag);                                                         // 372\n\t\t\t_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);                                                      // 373\n\t\t\t_off(ownerDocument, 'mousemove', this._disableDelayedDrag);                                                        // 374\n\t\t\t_off(ownerDocument, 'touchmove', this._disableDelayedDrag);                                                        // 375\n\t\t},                                                                                                                  // 376\n                                                                                                                      // 377\n\t\t_triggerDragStart: function (/** Touch */touch) {                                                                   // 378\n\t\t\tif (touch) {                                                                                                       // 379\n\t\t\t\t// Touch device support                                                                                           // 380\n\t\t\t\ttapEvt = {                                                                                                        // 381\n\t\t\t\t\ttarget: dragEl,                                                                                                  // 382\n\t\t\t\t\tclientX: touch.clientX,                                                                                          // 383\n\t\t\t\t\tclientY: touch.clientY                                                                                           // 384\n\t\t\t\t};                                                                                                                // 385\n                                                                                                                      // 386\n\t\t\t\tthis._onDragStart(tapEvt, 'touch');                                                                               // 387\n\t\t\t}                                                                                                                  // 388\n\t\t\telse if (!this.nativeDraggable) {                                                                                  // 389\n\t\t\t\tthis._onDragStart(tapEvt, true);                                                                                  // 390\n\t\t\t}                                                                                                                  // 391\n\t\t\telse {                                                                                                             // 392\n\t\t\t\t_on(dragEl, 'dragend', this);                                                                                     // 393\n\t\t\t\t_on(rootEl, 'dragstart', this._onDragStart);                                                                      // 394\n\t\t\t}                                                                                                                  // 395\n                                                                                                                      // 396\n\t\t\ttry {                                                                                                              // 397\n\t\t\t\tif (document.selection) {                                                                                         // 398\n\t\t\t\t\tdocument.selection.empty();                                                                                      // 399\n\t\t\t\t} else {                                                                                                          // 400\n\t\t\t\t\twindow.getSelection().removeAllRanges();                                                                         // 401\n\t\t\t\t}                                                                                                                 // 402\n\t\t\t} catch (err) {                                                                                                    // 403\n\t\t\t}                                                                                                                  // 404\n\t\t},                                                                                                                  // 405\n                                                                                                                      // 406\n\t\t_dragStarted: function () {                                                                                         // 407\n\t\t\tif (rootEl && dragEl) {                                                                                            // 408\n\t\t\t\t// Apply effect                                                                                                   // 409\n\t\t\t\t_toggleClass(dragEl, this.options.ghostClass, true);                                                              // 410\n                                                                                                                      // 411\n\t\t\t\tSortable.active = this;                                                                                           // 412\n                                                                                                                      // 413\n\t\t\t\t// Drag start event                                                                                               // 414\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);                                                  // 415\n\t\t\t}                                                                                                                  // 416\n\t\t},                                                                                                                  // 417\n                                                                                                                      // 418\n\t\t_emulateDragOver: function () {                                                                                     // 419\n\t\t\tif (touchEvt) {                                                                                                    // 420\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {                                       // 421\n\t\t\t\t\treturn;                                                                                                          // 422\n\t\t\t\t}                                                                                                                 // 423\n                                                                                                                      // 424\n\t\t\t\tthis._lastX = touchEvt.clientX;                                                                                   // 425\n\t\t\t\tthis._lastY = touchEvt.clientY;                                                                                   // 426\n                                                                                                                      // 427\n\t\t\t\tif (!supportCssPointerEvents) {                                                                                   // 428\n\t\t\t\t\t_css(ghostEl, 'display', 'none');                                                                                // 429\n\t\t\t\t}                                                                                                                 // 430\n                                                                                                                      // 431\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),                                       // 432\n\t\t\t\t\tparent = target,                                                                                                 // 433\n\t\t\t\t\tgroupName = ' ' + this.options.group.name + '',                                                                  // 434\n\t\t\t\t\ti = touchDragOverListeners.length;                                                                               // 435\n                                                                                                                      // 436\n\t\t\t\tif (parent) {                                                                                                     // 437\n\t\t\t\t\tdo {                                                                                                             // 438\n\t\t\t\t\t\tif (parent[expando] && parent[expando].options.groups.indexOf(groupName) > -1) {                                // 439\n\t\t\t\t\t\t\twhile (i--) {                                                                                                  // 440\n\t\t\t\t\t\t\t\ttouchDragOverListeners[i]({                                                                                   // 441\n\t\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,                                                                                   // 442\n\t\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,                                                                                   // 443\n\t\t\t\t\t\t\t\t\ttarget: target,                                                                                              // 444\n\t\t\t\t\t\t\t\t\trootEl: parent                                                                                               // 445\n\t\t\t\t\t\t\t\t});                                                                                                           // 446\n\t\t\t\t\t\t\t}                                                                                                              // 447\n                                                                                                                      // 448\n\t\t\t\t\t\t\tbreak;                                                                                                         // 449\n\t\t\t\t\t\t}                                                                                                               // 450\n                                                                                                                      // 451\n\t\t\t\t\t\ttarget = parent; // store last element                                                                          // 452\n\t\t\t\t\t}                                                                                                                // 453\n\t\t\t\t\t/* jshint boss:true */                                                                                           // 454\n\t\t\t\t\twhile (parent = parent.parentNode);                                                                              // 455\n\t\t\t\t}                                                                                                                 // 456\n                                                                                                                      // 457\n\t\t\t\tif (!supportCssPointerEvents) {                                                                                   // 458\n\t\t\t\t\t_css(ghostEl, 'display', '');                                                                                    // 459\n\t\t\t\t}                                                                                                                 // 460\n\t\t\t}                                                                                                                  // 461\n\t\t},                                                                                                                  // 462\n                                                                                                                      // 463\n                                                                                                                      // 464\n\t\t_onTouchMove: function (/**TouchEvent*/evt) {                                                                       // 465\n\t\t\tif (tapEvt) {                                                                                                      // 466\n\t\t\t\t// only set the status to dragging, when we are actually dragging                                                 // 467\n\t\t\t\tif (!Sortable.active) {                                                                                           // 468\n\t\t\t\t\tthis._dragStarted();                                                                                             // 469\n\t\t\t\t}                                                                                                                 // 470\n                                                                                                                      // 471\n\t\t\t\t// as well as creating the ghost element on the document body                                                     // 472\n\t\t\t\tthis._appendGhost();                                                                                              // 473\n                                                                                                                      // 474\n\t\t\t\tvar touch = evt.touches ? evt.touches[0] : evt,                                                                   // 475\n\t\t\t\t\tdx = touch.clientX - tapEvt.clientX,                                                                             // 476\n\t\t\t\t\tdy = touch.clientY - tapEvt.clientY,                                                                             // 477\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)'; // 478\n                                                                                                                      // 479\n\t\t\t\tmoved = true;                                                                                                     // 480\n\t\t\t\ttouchEvt = touch;                                                                                                 // 481\n                                                                                                                      // 482\n\t\t\t\t_css(ghostEl, 'webkitTransform', translate3d);                                                                    // 483\n\t\t\t\t_css(ghostEl, 'mozTransform', translate3d);                                                                       // 484\n\t\t\t\t_css(ghostEl, 'msTransform', translate3d);                                                                        // 485\n\t\t\t\t_css(ghostEl, 'transform', translate3d);                                                                          // 486\n                                                                                                                      // 487\n\t\t\t\tevt.preventDefault();                                                                                             // 488\n\t\t\t}                                                                                                                  // 489\n\t\t},                                                                                                                  // 490\n                                                                                                                      // 491\n\t\t_appendGhost: function () {                                                                                         // 492\n\t\t\tif (!ghostEl) {                                                                                                    // 493\n\t\t\t\tvar rect = dragEl.getBoundingClientRect(),                                                                        // 494\n\t\t\t\t\tcss = _css(dragEl),                                                                                              // 495\n\t\t\t\t\tghostRect;                                                                                                       // 496\n                                                                                                                      // 497\n\t\t\t\tghostEl = dragEl.cloneNode(true);                                                                                 // 498\n                                                                                                                      // 499\n\t\t\t\t_toggleClass(ghostEl, this.options.ghostClass, false);                                                            // 500\n\t\t\t\t_toggleClass(ghostEl, this.options.fallbackClass, true);                                                          // 501\n                                                                                                                      // 502\n\t\t\t\t_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));                                                     // 503\n\t\t\t\t_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));                                                  // 504\n\t\t\t\t_css(ghostEl, 'width', rect.width);                                                                               // 505\n\t\t\t\t_css(ghostEl, 'height', rect.height);                                                                             // 506\n\t\t\t\t_css(ghostEl, 'opacity', '0.8');                                                                                  // 507\n\t\t\t\t_css(ghostEl, 'position', 'fixed');                                                                               // 508\n\t\t\t\t_css(ghostEl, 'zIndex', '100000');                                                                                // 509\n\t\t\t\t_css(ghostEl, 'pointerEvents', 'none');                                                                           // 510\n                                                                                                                      // 511\n\t\t\t\tthis.options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);                 // 512\n                                                                                                                      // 513\n\t\t\t\t// Fixing dimensions.                                                                                             // 514\n\t\t\t\tghostRect = ghostEl.getBoundingClientRect();                                                                      // 515\n\t\t\t\t_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);                                                         // 516\n\t\t\t\t_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);                                                      // 517\n\t\t\t}                                                                                                                  // 518\n\t\t},                                                                                                                  // 519\n                                                                                                                      // 520\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {                                                   // 521\n\t\t\tvar dataTransfer = evt.dataTransfer,                                                                               // 522\n\t\t\t\toptions = this.options;                                                                                           // 523\n                                                                                                                      // 524\n\t\t\tthis._offUpEvents();                                                                                               // 525\n                                                                                                                      // 526\n\t\t\tif (activeGroup.pull == 'clone') {                                                                                 // 527\n\t\t\t\tcloneEl = dragEl.cloneNode(true);                                                                                 // 528\n\t\t\t\t_css(cloneEl, 'display', 'none');                                                                                 // 529\n\t\t\t\trootEl.insertBefore(cloneEl, dragEl);                                                                             // 530\n\t\t\t}                                                                                                                  // 531\n                                                                                                                      // 532\n\t\t\tif (useFallback) {                                                                                                 // 533\n                                                                                                                      // 534\n\t\t\t\tif (useFallback === 'touch') {                                                                                    // 535\n\t\t\t\t\t// Bind touch events                                                                                             // 536\n\t\t\t\t\t_on(document, 'touchmove', this._onTouchMove);                                                                   // 537\n\t\t\t\t\t_on(document, 'touchend', this._onDrop);                                                                         // 538\n\t\t\t\t\t_on(document, 'touchcancel', this._onDrop);                                                                      // 539\n\t\t\t\t} else {                                                                                                          // 540\n\t\t\t\t\t// Old brwoser                                                                                                   // 541\n\t\t\t\t\t_on(document, 'mousemove', this._onTouchMove);                                                                   // 542\n\t\t\t\t\t_on(document, 'mouseup', this._onDrop);                                                                          // 543\n\t\t\t\t}                                                                                                                 // 544\n                                                                                                                      // 545\n\t\t\t\tthis._loopId = setInterval(this._emulateDragOver, 50);                                                            // 546\n\t\t\t}                                                                                                                  // 547\n\t\t\telse {                                                                                                             // 548\n\t\t\t\tif (dataTransfer) {                                                                                               // 549\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';                                                                             // 550\n\t\t\t\t\toptions.setData && options.setData.call(this, dataTransfer, dragEl);                                             // 551\n\t\t\t\t}                                                                                                                 // 552\n                                                                                                                      // 553\n\t\t\t\t_on(document, 'drop', this);                                                                                      // 554\n\t\t\t\tsetTimeout(this._dragStarted, 0);                                                                                 // 555\n\t\t\t}                                                                                                                  // 556\n\t\t},                                                                                                                  // 557\n                                                                                                                      // 558\n\t\t_onDragOver: function (/**Event*/evt) {                                                                             // 559\n\t\t\tvar el = this.el,                                                                                                  // 560\n\t\t\t\ttarget,                                                                                                           // 561\n\t\t\t\tdragRect,                                                                                                         // 562\n\t\t\t\trevert,                                                                                                           // 563\n\t\t\t\toptions = this.options,                                                                                           // 564\n\t\t\t\tgroup = options.group,                                                                                            // 565\n\t\t\t\tgroupPut = group.put,                                                                                             // 566\n\t\t\t\tisOwner = (activeGroup === group),                                                                                // 567\n\t\t\t\tcanSort = options.sort;                                                                                           // 568\n                                                                                                                      // 569\n\t\t\tif (evt.preventDefault !== void 0) {                                                                               // 570\n\t\t\t\tevt.preventDefault();                                                                                             // 571\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation();                                                                 // 572\n\t\t\t}                                                                                                                  // 573\n                                                                                                                      // 574\n\t\t\tmoved = true;                                                                                                      // 575\n                                                                                                                      // 576\n\t\t\tif (activeGroup && !options.disabled &&                                                                            // 577\n\t\t\t\t(isOwner                                                                                                          // 578\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list                        // 579\n\t\t\t\t\t: activeGroup.pull && groupPut && (                                                                              // 580\n\t\t\t\t\t\t(activeGroup.name === group.name) || // by Name                                                                 // 581\n\t\t\t\t\t\t(groupPut.indexOf && ~groupPut.indexOf(activeGroup.name)) // by Array                                           // 582\n\t\t\t\t\t)                                                                                                                // 583\n\t\t\t\t) &&                                                                                                              // 584\n\t\t\t\t(evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback                                               // 585\n\t\t\t) {                                                                                                                // 586\n\t\t\t\t// Smart auto-scrolling                                                                                           // 587\n\t\t\t\t_autoScroll(evt, options, this.el);                                                                               // 588\n                                                                                                                      // 589\n\t\t\t\tif (_silent) {                                                                                                    // 590\n\t\t\t\t\treturn;                                                                                                          // 591\n\t\t\t\t}                                                                                                                 // 592\n                                                                                                                      // 593\n\t\t\t\ttarget = _closest(evt.target, options.draggable, el);                                                             // 594\n\t\t\t\tdragRect = dragEl.getBoundingClientRect();                                                                        // 595\n                                                                                                                      // 596\n\t\t\t\tif (revert) {                                                                                                     // 597\n\t\t\t\t\t_cloneHide(true);                                                                                                // 598\n                                                                                                                      // 599\n\t\t\t\t\tif (cloneEl || nextEl) {                                                                                         // 600\n\t\t\t\t\t\trootEl.insertBefore(dragEl, cloneEl || nextEl);                                                                 // 601\n\t\t\t\t\t}                                                                                                                // 602\n\t\t\t\t\telse if (!canSort) {                                                                                             // 603\n\t\t\t\t\t\trootEl.appendChild(dragEl);                                                                                     // 604\n\t\t\t\t\t}                                                                                                                // 605\n                                                                                                                      // 606\n\t\t\t\t\treturn;                                                                                                          // 607\n\t\t\t\t}                                                                                                                 // 608\n                                                                                                                      // 609\n                                                                                                                      // 610\n\t\t\t\tif ((el.children.length === 0) || (el.children[0] === ghostEl) ||                                                 // 611\n\t\t\t\t\t(el === evt.target) && (target = _ghostIsLast(el, evt))                                                          // 612\n\t\t\t\t) {                                                                                                               // 613\n                                                                                                                      // 614\n\t\t\t\t\tif (target) {                                                                                                    // 615\n\t\t\t\t\t\tif (target.animated) {                                                                                          // 616\n\t\t\t\t\t\t\treturn;                                                                                                        // 617\n\t\t\t\t\t\t}                                                                                                               // 618\n                                                                                                                      // 619\n\t\t\t\t\t\ttargetRect = target.getBoundingClientRect();                                                                    // 620\n\t\t\t\t\t}                                                                                                                // 621\n                                                                                                                      // 622\n\t\t\t\t\t_cloneHide(isOwner);                                                                                             // 623\n                                                                                                                      // 624\n\t\t\t\t\tif (_onMove(rootEl, el, dragEl, dragRect, target, targetRect) !== false) {                                       // 625\n\t\t\t\t\t\tif (!dragEl.contains(el)) {                                                                                     // 626\n\t\t\t\t\t\t\tel.appendChild(dragEl);                                                                                        // 627\n\t\t\t\t\t\t\tparentEl = el; // actualization                                                                                // 628\n\t\t\t\t\t\t}                                                                                                               // 629\n                                                                                                                      // 630\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);                                                                                // 631\n\t\t\t\t\t\ttarget && this._animate(targetRect, target);                                                                    // 632\n\t\t\t\t\t}                                                                                                                // 633\n\t\t\t\t}                                                                                                                 // 634\n\t\t\t\telse if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {            // 635\n\t\t\t\t\tif (lastEl !== target) {                                                                                         // 636\n\t\t\t\t\t\tlastEl = target;                                                                                                // 637\n\t\t\t\t\t\tlastCSS = _css(target);                                                                                         // 638\n\t\t\t\t\t\tlastParentCSS = _css(target.parentNode);                                                                        // 639\n\t\t\t\t\t}                                                                                                                // 640\n                                                                                                                      // 641\n                                                                                                                      // 642\n\t\t\t\t\tvar targetRect = target.getBoundingClientRect(),                                                                 // 643\n\t\t\t\t\t\twidth = targetRect.right - targetRect.left,                                                                     // 644\n\t\t\t\t\t\theight = targetRect.bottom - targetRect.top,                                                                    // 645\n\t\t\t\t\t\tfloating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display)                                         // 646\n\t\t\t\t\t\t\t|| (lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0),                  // 647\n\t\t\t\t\t\tisWide = (target.offsetWidth > dragEl.offsetWidth),                                                             // 648\n\t\t\t\t\t\tisLong = (target.offsetHeight > dragEl.offsetHeight),                                                           // 649\n\t\t\t\t\t\thalfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5, // 650\n\t\t\t\t\t\tnextSibling = target.nextElementSibling,                                                                        // 651\n\t\t\t\t\t\tmoveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect),                                         // 652\n\t\t\t\t\t\tafter                                                                                                           // 653\n\t\t\t\t\t;                                                                                                                // 654\n                                                                                                                      // 655\n\t\t\t\t\tif (moveVector !== false) {                                                                                      // 656\n\t\t\t\t\t\t_silent = true;                                                                                                 // 657\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);                                                                                      // 658\n                                                                                                                      // 659\n\t\t\t\t\t\t_cloneHide(isOwner);                                                                                            // 660\n                                                                                                                      // 661\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {                                                                    // 662\n\t\t\t\t\t\t\tafter = (moveVector === 1);                                                                                    // 663\n\t\t\t\t\t\t}                                                                                                               // 664\n\t\t\t\t\t\telse if (floating) {                                                                                            // 665\n\t\t\t\t\t\t\tvar elTop = dragEl.offsetTop,                                                                                  // 666\n\t\t\t\t\t\t\t\ttgTop = target.offsetTop;                                                                                     // 667\n                                                                                                                      // 668\n\t\t\t\t\t\t\tif (elTop === tgTop) {                                                                                         // 669\n\t\t\t\t\t\t\t\tafter = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;                           // 670\n\t\t\t\t\t\t\t} else {                                                                                                       // 671\n\t\t\t\t\t\t\t\tafter = tgTop > elTop;                                                                                        // 672\n\t\t\t\t\t\t\t}                                                                                                              // 673\n\t\t\t\t\t\t} else {                                                                                                        // 674\n\t\t\t\t\t\t\tafter = (nextSibling !== dragEl) && !isLong || halfway && isLong;                                              // 675\n\t\t\t\t\t\t}                                                                                                               // 676\n                                                                                                                      // 677\n\t\t\t\t\t\tif (!dragEl.contains(el)) {                                                                                     // 678\n\t\t\t\t\t\t\tif (after && !nextSibling) {                                                                                   // 679\n\t\t\t\t\t\t\t\tel.appendChild(dragEl);                                                                                       // 680\n\t\t\t\t\t\t\t} else {                                                                                                       // 681\n\t\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);                                         // 682\n\t\t\t\t\t\t\t}                                                                                                              // 683\n\t\t\t\t\t\t}                                                                                                               // 684\n                                                                                                                      // 685\n\t\t\t\t\t\tparentEl = dragEl.parentNode; // actualization                                                                  // 686\n                                                                                                                      // 687\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);                                                                                // 688\n\t\t\t\t\t\tthis._animate(targetRect, target);                                                                              // 689\n\t\t\t\t\t}                                                                                                                // 690\n\t\t\t\t}                                                                                                                 // 691\n\t\t\t}                                                                                                                  // 692\n\t\t},                                                                                                                  // 693\n                                                                                                                      // 694\n\t\t_animate: function (prevRect, target) {                                                                             // 695\n\t\t\tvar ms = this.options.animation;                                                                                   // 696\n                                                                                                                      // 697\n\t\t\tif (ms) {                                                                                                          // 698\n\t\t\t\tvar currentRect = target.getBoundingClientRect();                                                                 // 699\n                                                                                                                      // 700\n\t\t\t\t_css(target, 'transition', 'none');                                                                               // 701\n\t\t\t\t_css(target, 'transform', 'translate3d('                                                                          // 702\n\t\t\t\t\t+ (prevRect.left - currentRect.left) + 'px,'                                                                     // 703\n\t\t\t\t\t+ (prevRect.top - currentRect.top) + 'px,0)'                                                                     // 704\n\t\t\t\t);                                                                                                                // 705\n                                                                                                                      // 706\n\t\t\t\ttarget.offsetWidth; // repaint                                                                                    // 707\n                                                                                                                      // 708\n\t\t\t\t_css(target, 'transition', 'all ' + ms + 'ms');                                                                   // 709\n\t\t\t\t_css(target, 'transform', 'translate3d(0,0,0)');                                                                  // 710\n                                                                                                                      // 711\n\t\t\t\tclearTimeout(target.animated);                                                                                    // 712\n\t\t\t\ttarget.animated = setTimeout(function () {                                                                        // 713\n\t\t\t\t\t_css(target, 'transition', '');                                                                                  // 714\n\t\t\t\t\t_css(target, 'transform', '');                                                                                   // 715\n\t\t\t\t\ttarget.animated = false;                                                                                         // 716\n\t\t\t\t}, ms);                                                                                                           // 717\n\t\t\t}                                                                                                                  // 718\n\t\t},                                                                                                                  // 719\n                                                                                                                      // 720\n\t\t_offUpEvents: function () {                                                                                         // 721\n\t\t\tvar ownerDocument = this.el.ownerDocument;                                                                         // 722\n                                                                                                                      // 723\n\t\t\t_off(document, 'touchmove', this._onTouchMove);                                                                    // 724\n\t\t\t_off(ownerDocument, 'mouseup', this._onDrop);                                                                      // 725\n\t\t\t_off(ownerDocument, 'touchend', this._onDrop);                                                                     // 726\n\t\t\t_off(ownerDocument, 'touchcancel', this._onDrop);                                                                  // 727\n\t\t},                                                                                                                  // 728\n                                                                                                                      // 729\n\t\t_onDrop: function (/**Event*/evt) {                                                                                 // 730\n\t\t\tvar el = this.el,                                                                                                  // 731\n\t\t\t\toptions = this.options;                                                                                           // 732\n                                                                                                                      // 733\n\t\t\tclearInterval(this._loopId);                                                                                       // 734\n\t\t\tclearInterval(autoScroll.pid);                                                                                     // 735\n\t\t\tclearTimeout(this._dragStartTimer);                                                                                // 736\n                                                                                                                      // 737\n\t\t\t// Unbind events                                                                                                   // 738\n\t\t\t_off(document, 'mousemove', this._onTouchMove);                                                                    // 739\n                                                                                                                      // 740\n\t\t\tif (this.nativeDraggable) {                                                                                        // 741\n\t\t\t\t_off(document, 'drop', this);                                                                                     // 742\n\t\t\t\t_off(el, 'dragstart', this._onDragStart);                                                                         // 743\n\t\t\t}                                                                                                                  // 744\n                                                                                                                      // 745\n\t\t\tthis._offUpEvents();                                                                                               // 746\n                                                                                                                      // 747\n\t\t\tif (evt) {                                                                                                         // 748\n\t\t\t\tif (moved) {                                                                                                      // 749\n\t\t\t\t\tevt.preventDefault();                                                                                            // 750\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();                                                                    // 751\n\t\t\t\t}                                                                                                                 // 752\n                                                                                                                      // 753\n\t\t\t\tghostEl && ghostEl.parentNode.removeChild(ghostEl);                                                               // 754\n                                                                                                                      // 755\n\t\t\t\tif (dragEl) {                                                                                                     // 756\n\t\t\t\t\tif (this.nativeDraggable) {                                                                                      // 757\n\t\t\t\t\t\t_off(dragEl, 'dragend', this);                                                                                  // 758\n\t\t\t\t\t}                                                                                                                // 759\n                                                                                                                      // 760\n\t\t\t\t\t_disableDraggable(dragEl);                                                                                       // 761\n                                                                                                                      // 762\n\t\t\t\t\t// Remove class's                                                                                                // 763\n\t\t\t\t\t_toggleClass(dragEl, this.options.ghostClass, false);                                                            // 764\n\t\t\t\t\t_toggleClass(dragEl, this.options.chosenClass, false);                                                           // 765\n                                                                                                                      // 766\n\t\t\t\t\tif (rootEl !== parentEl) {                                                                                       // 767\n\t\t\t\t\t\tnewIndex = _index(dragEl);                                                                                      // 768\n                                                                                                                      // 769\n\t\t\t\t\t\tif (newIndex >= 0) {                                                                                            // 770\n\t\t\t\t\t\t\t// drag from one list and drop into another                                                                    // 771\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);                                    // 772\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);                                      // 773\n                                                                                                                      // 774\n\t\t\t\t\t\t\t// Add event                                                                                                   // 775\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);                                     // 776\n                                                                                                                      // 777\n\t\t\t\t\t\t\t// Remove event                                                                                                // 778\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);                                    // 779\n\t\t\t\t\t\t}                                                                                                               // 780\n\t\t\t\t\t}                                                                                                                // 781\n\t\t\t\t\telse {                                                                                                           // 782\n\t\t\t\t\t\t// Remove clone                                                                                                 // 783\n\t\t\t\t\t\tcloneEl && cloneEl.parentNode.removeChild(cloneEl);                                                             // 784\n                                                                                                                      // 785\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {                                                                            // 786\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent                                                      // 787\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);                                                                                     // 788\n                                                                                                                      // 789\n\t\t\t\t\t\t\tif (newIndex >= 0) {                                                                                           // 790\n\t\t\t\t\t\t\t\t// drag & drop within the same list                                                                           // 791\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);                                   // 792\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);                                     // 793\n\t\t\t\t\t\t\t}                                                                                                              // 794\n\t\t\t\t\t\t}                                                                                                               // 795\n\t\t\t\t\t}                                                                                                                // 796\n                                                                                                                      // 797\n\t\t\t\t\tif (Sortable.active) {                                                                                           // 798\n\t\t\t\t\t\tif (newIndex === null || newIndex === -1) {                                                                     // 799\n\t\t\t\t\t\t\tnewIndex = oldIndex;                                                                                           // 800\n\t\t\t\t\t\t}                                                                                                               // 801\n                                                                                                                      // 802\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);                                        // 803\n                                                                                                                      // 804\n\t\t\t\t\t\t// Save sorting                                                                                                 // 805\n\t\t\t\t\t\tthis.save();                                                                                                    // 806\n\t\t\t\t\t}                                                                                                                // 807\n\t\t\t\t}                                                                                                                 // 808\n                                                                                                                      // 809\n\t\t\t\t// Nulling                                                                                                        // 810\n\t\t\t\trootEl =                                                                                                          // 811\n\t\t\t\tdragEl =                                                                                                          // 812\n\t\t\t\tparentEl =                                                                                                        // 813\n\t\t\t\tghostEl =                                                                                                         // 814\n\t\t\t\tnextEl =                                                                                                          // 815\n\t\t\t\tcloneEl =                                                                                                         // 816\n                                                                                                                      // 817\n\t\t\t\tscrollEl =                                                                                                        // 818\n\t\t\t\tscrollParentEl =                                                                                                  // 819\n                                                                                                                      // 820\n\t\t\t\ttapEvt =                                                                                                          // 821\n\t\t\t\ttouchEvt =                                                                                                        // 822\n                                                                                                                      // 823\n\t\t\t\tmoved =                                                                                                           // 824\n\t\t\t\tnewIndex =                                                                                                        // 825\n                                                                                                                      // 826\n\t\t\t\tlastEl =                                                                                                          // 827\n\t\t\t\tlastCSS =                                                                                                         // 828\n                                                                                                                      // 829\n\t\t\t\tactiveGroup =                                                                                                     // 830\n\t\t\t\tSortable.active = null;                                                                                           // 831\n\t\t\t}                                                                                                                  // 832\n\t\t},                                                                                                                  // 833\n                                                                                                                      // 834\n                                                                                                                      // 835\n\t\thandleEvent: function (/**Event*/evt) {                                                                             // 836\n\t\t\tvar type = evt.type;                                                                                               // 837\n                                                                                                                      // 838\n\t\t\tif (type === 'dragover' || type === 'dragenter') {                                                                 // 839\n\t\t\t\tif (dragEl) {                                                                                                     // 840\n\t\t\t\t\tthis._onDragOver(evt);                                                                                           // 841\n\t\t\t\t\t_globalDragOver(evt);                                                                                            // 842\n\t\t\t\t}                                                                                                                 // 843\n\t\t\t}                                                                                                                  // 844\n\t\t\telse if (type === 'drop' || type === 'dragend') {                                                                  // 845\n\t\t\t\tthis._onDrop(evt);                                                                                                // 846\n\t\t\t}                                                                                                                  // 847\n\t\t},                                                                                                                  // 848\n                                                                                                                      // 849\n                                                                                                                      // 850\n\t\t/**                                                                                                                 // 851\n\t\t * Serializes the item into an array of string.                                                                     // 852\n\t\t * @returns {String[]}                                                                                              // 853\n\t\t */                                                                                                                 // 854\n\t\ttoArray: function () {                                                                                              // 855\n\t\t\tvar order = [],                                                                                                    // 856\n\t\t\t\tel,                                                                                                               // 857\n\t\t\t\tchildren = this.el.children,                                                                                      // 858\n\t\t\t\ti = 0,                                                                                                            // 859\n\t\t\t\tn = children.length,                                                                                              // 860\n\t\t\t\toptions = this.options;                                                                                           // 861\n                                                                                                                      // 862\n\t\t\tfor (; i < n; i++) {                                                                                               // 863\n\t\t\t\tel = children[i];                                                                                                 // 864\n\t\t\t\tif (_closest(el, options.draggable, this.el)) {                                                                   // 865\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));                                              // 866\n\t\t\t\t}                                                                                                                 // 867\n\t\t\t}                                                                                                                  // 868\n                                                                                                                      // 869\n\t\t\treturn order;                                                                                                      // 870\n\t\t},                                                                                                                  // 871\n                                                                                                                      // 872\n                                                                                                                      // 873\n\t\t/**                                                                                                                 // 874\n\t\t * Sorts the elements according to the array.                                                                       // 875\n\t\t * @param  {String[]}  order  order of the items                                                                    // 876\n\t\t */                                                                                                                 // 877\n\t\tsort: function (order) {                                                                                            // 878\n\t\t\tvar items = {}, rootEl = this.el;                                                                                  // 879\n                                                                                                                      // 880\n\t\t\tthis.toArray().forEach(function (id, i) {                                                                          // 881\n\t\t\t\tvar el = rootEl.children[i];                                                                                      // 882\n                                                                                                                      // 883\n\t\t\t\tif (_closest(el, this.options.draggable, rootEl)) {                                                               // 884\n\t\t\t\t\titems[id] = el;                                                                                                  // 885\n\t\t\t\t}                                                                                                                 // 886\n\t\t\t}, this);                                                                                                          // 887\n                                                                                                                      // 888\n\t\t\torder.forEach(function (id) {                                                                                      // 889\n\t\t\t\tif (items[id]) {                                                                                                  // 890\n\t\t\t\t\trootEl.removeChild(items[id]);                                                                                   // 891\n\t\t\t\t\trootEl.appendChild(items[id]);                                                                                   // 892\n\t\t\t\t}                                                                                                                 // 893\n\t\t\t});                                                                                                                // 894\n\t\t},                                                                                                                  // 895\n                                                                                                                      // 896\n                                                                                                                      // 897\n\t\t/**                                                                                                                 // 898\n\t\t * Save the current sorting                                                                                         // 899\n\t\t */                                                                                                                 // 900\n\t\tsave: function () {                                                                                                 // 901\n\t\t\tvar store = this.options.store;                                                                                    // 902\n\t\t\tstore && store.set(this);                                                                                          // 903\n\t\t},                                                                                                                  // 904\n                                                                                                                      // 905\n                                                                                                                      // 906\n\t\t/**                                                                                                                 // 907\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el                                                                                       // 909\n\t\t * @param   {String}       [selector]  default: `options.draggable`                                                 // 910\n\t\t * @returns {HTMLElement|null}                                                                                      // 911\n\t\t */                                                                                                                 // 912\n\t\tclosest: function (el, selector) {                                                                                  // 913\n\t\t\treturn _closest(el, selector || this.options.draggable, this.el);                                                  // 914\n\t\t},                                                                                                                  // 915\n                                                                                                                      // 916\n                                                                                                                      // 917\n\t\t/**                                                                                                                 // 918\n\t\t * Set/get option                                                                                                   // 919\n\t\t * @param   {string} name                                                                                           // 920\n\t\t * @param   {*}      [value]                                                                                        // 921\n\t\t * @returns {*}                                                                                                     // 922\n\t\t */                                                                                                                 // 923\n\t\toption: function (name, value) {                                                                                    // 924\n\t\t\tvar options = this.options;                                                                                        // 925\n                                                                                                                      // 926\n\t\t\tif (value === void 0) {                                                                                            // 927\n\t\t\t\treturn options[name];                                                                                             // 928\n\t\t\t} else {                                                                                                           // 929\n\t\t\t\toptions[name] = value;                                                                                            // 930\n                                                                                                                      // 931\n\t\t\t\tif (name === 'group') {                                                                                           // 932\n\t\t\t\t\t_prepareGroup(options);                                                                                          // 933\n\t\t\t\t}                                                                                                                 // 934\n\t\t\t}                                                                                                                  // 935\n\t\t},                                                                                                                  // 936\n                                                                                                                      // 937\n                                                                                                                      // 938\n\t\t/**                                                                                                                 // 939\n\t\t * Destroy                                                                                                          // 940\n\t\t */                                                                                                                 // 941\n\t\tdestroy: function () {                                                                                              // 942\n\t\t\tvar el = this.el;                                                                                                  // 943\n                                                                                                                      // 944\n\t\t\tel[expando] = null;                                                                                                // 945\n                                                                                                                      // 946\n\t\t\t_off(el, 'mousedown', this._onTapStart);                                                                           // 947\n\t\t\t_off(el, 'touchstart', this._onTapStart);                                                                          // 948\n                                                                                                                      // 949\n\t\t\tif (this.nativeDraggable) {                                                                                        // 950\n\t\t\t\t_off(el, 'dragover', this);                                                                                       // 951\n\t\t\t\t_off(el, 'dragenter', this);                                                                                      // 952\n\t\t\t}                                                                                                                  // 953\n                                                                                                                      // 954\n\t\t\t// Remove draggable attributes                                                                                     // 955\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {                                   // 956\n\t\t\t\tel.removeAttribute('draggable');                                                                                  // 957\n\t\t\t});                                                                                                                // 958\n                                                                                                                      // 959\n\t\t\ttouchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);                                // 960\n                                                                                                                      // 961\n\t\t\tthis._onDrop();                                                                                                    // 962\n                                                                                                                      // 963\n\t\t\tthis.el = el = null;                                                                                               // 964\n\t\t}                                                                                                                   // 965\n\t};                                                                                                                   // 966\n                                                                                                                      // 967\n                                                                                                                      // 968\n\tfunction _cloneHide(state) {                                                                                         // 969\n\t\tif (cloneEl && (cloneEl.state !== state)) {                                                                         // 970\n\t\t\t_css(cloneEl, 'display', state ? 'none' : '');                                                                     // 971\n\t\t\t!state && cloneEl.state && rootEl.insertBefore(cloneEl, dragEl);                                                   // 972\n\t\t\tcloneEl.state = state;                                                                                             // 973\n\t\t}                                                                                                                   // 974\n\t}                                                                                                                    // 975\n                                                                                                                      // 976\n                                                                                                                      // 977\n\tfunction _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {                                    // 978\n\t\tif (el) {                                                                                                           // 979\n\t\t\tctx = ctx || document;                                                                                             // 980\n\t\t\tselector = selector.split('.');                                                                                    // 981\n                                                                                                                      // 982\n\t\t\tvar tag = selector.shift().toUpperCase(),                                                                          // 983\n\t\t\t\tre = new RegExp('\\\\s(' + selector.join('|') + ')(?=\\\\s)', 'g');                                                   // 984\n                                                                                                                      // 985\n\t\t\tdo {                                                                                                               // 986\n\t\t\t\tif (                                                                                                              // 987\n\t\t\t\t\t(tag === '>*' && el.parentNode === ctx) || (                                                                     // 988\n\t\t\t\t\t\t(tag === '' || el.nodeName.toUpperCase() == tag) &&                                                             // 989\n\t\t\t\t\t\t(!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)                    // 990\n\t\t\t\t\t)                                                                                                                // 991\n\t\t\t\t) {                                                                                                               // 992\n\t\t\t\t\treturn el;                                                                                                       // 993\n\t\t\t\t}                                                                                                                 // 994\n\t\t\t}                                                                                                                  // 995\n\t\t\twhile (el !== ctx && (el = el.parentNode));                                                                        // 996\n\t\t}                                                                                                                   // 997\n                                                                                                                      // 998\n\t\treturn null;                                                                                                        // 999\n\t}                                                                                                                    // 1000\n                                                                                                                      // 1001\n                                                                                                                      // 1002\n\tfunction _globalDragOver(/**Event*/evt) {                                                                            // 1003\n\t\tif (evt.dataTransfer) {                                                                                             // 1004\n\t\t\tevt.dataTransfer.dropEffect = 'move';                                                                              // 1005\n\t\t}                                                                                                                   // 1006\n\t\tevt.preventDefault();                                                                                               // 1007\n\t}                                                                                                                    // 1008\n                                                                                                                      // 1009\n                                                                                                                      // 1010\n\tfunction _on(el, event, fn) {                                                                                        // 1011\n\t\tel.addEventListener(event, fn, false);                                                                              // 1012\n\t}                                                                                                                    // 1013\n                                                                                                                      // 1014\n                                                                                                                      // 1015\n\tfunction _off(el, event, fn) {                                                                                       // 1016\n\t\tel.removeEventListener(event, fn, false);                                                                           // 1017\n\t}                                                                                                                    // 1018\n                                                                                                                      // 1019\n                                                                                                                      // 1020\n\tfunction _toggleClass(el, name, state) {                                                                             // 1021\n\t\tif (el) {                                                                                                           // 1022\n\t\t\tif (el.classList) {                                                                                                // 1023\n\t\t\t\tel.classList[state ? 'add' : 'remove'](name);                                                                     // 1024\n\t\t\t}                                                                                                                  // 1025\n\t\t\telse {                                                                                                             // 1026\n\t\t\t\tvar className = (' ' + el.className + ' ').replace(RSPACE, ' ').replace(' ' + name + ' ', ' ');                   // 1027\n\t\t\t\tel.className = (className + (state ? ' ' + name : '')).replace(RSPACE, ' ');                                      // 1028\n\t\t\t}                                                                                                                  // 1029\n\t\t}                                                                                                                   // 1030\n\t}                                                                                                                    // 1031\n                                                                                                                      // 1032\n                                                                                                                      // 1033\n\tfunction _css(el, prop, val) {                                                                                       // 1034\n\t\tvar style = el && el.style;                                                                                         // 1035\n                                                                                                                      // 1036\n\t\tif (style) {                                                                                                        // 1037\n\t\t\tif (val === void 0) {                                                                                              // 1038\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {                                              // 1039\n\t\t\t\t\tval = document.defaultView.getComputedStyle(el, '');                                                             // 1040\n\t\t\t\t}                                                                                                                 // 1041\n\t\t\t\telse if (el.currentStyle) {                                                                                       // 1042\n\t\t\t\t\tval = el.currentStyle;                                                                                           // 1043\n\t\t\t\t}                                                                                                                 // 1044\n                                                                                                                      // 1045\n\t\t\t\treturn prop === void 0 ? val : val[prop];                                                                         // 1046\n\t\t\t}                                                                                                                  // 1047\n\t\t\telse {                                                                                                             // 1048\n\t\t\t\tif (!(prop in style)) {                                                                                           // 1049\n\t\t\t\t\tprop = '-webkit-' + prop;                                                                                        // 1050\n\t\t\t\t}                                                                                                                 // 1051\n                                                                                                                      // 1052\n\t\t\t\tstyle[prop] = val + (typeof val === 'string' ? '' : 'px');                                                        // 1053\n\t\t\t}                                                                                                                  // 1054\n\t\t}                                                                                                                   // 1055\n\t}                                                                                                                    // 1056\n                                                                                                                      // 1057\n                                                                                                                      // 1058\n\tfunction _find(ctx, tagName, iterator) {                                                                             // 1059\n\t\tif (ctx) {                                                                                                          // 1060\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;                                              // 1061\n                                                                                                                      // 1062\n\t\t\tif (iterator) {                                                                                                    // 1063\n\t\t\t\tfor (; i < n; i++) {                                                                                              // 1064\n\t\t\t\t\titerator(list[i], i);                                                                                            // 1065\n\t\t\t\t}                                                                                                                 // 1066\n\t\t\t}                                                                                                                  // 1067\n                                                                                                                      // 1068\n\t\t\treturn list;                                                                                                       // 1069\n\t\t}                                                                                                                   // 1070\n                                                                                                                      // 1071\n\t\treturn [];                                                                                                          // 1072\n\t}                                                                                                                    // 1073\n                                                                                                                      // 1074\n                                                                                                                      // 1075\n                                                                                                                      // 1076\n\tfunction _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {                            // 1077\n\t\tvar evt = document.createEvent('Event'),                                                                            // 1078\n\t\t\toptions = (sortable || rootEl[expando]).options,                                                                   // 1079\n\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);                                                     // 1080\n                                                                                                                      // 1081\n\t\tevt.initEvent(name, true, true);                                                                                    // 1082\n                                                                                                                      // 1083\n\t\tevt.to = rootEl;                                                                                                    // 1084\n\t\tevt.from = fromEl || rootEl;                                                                                        // 1085\n\t\tevt.item = targetEl || rootEl;                                                                                      // 1086\n\t\tevt.clone = cloneEl;                                                                                                // 1087\n                                                                                                                      // 1088\n\t\tevt.oldIndex = startIndex;                                                                                          // 1089\n\t\tevt.newIndex = newIndex;                                                                                            // 1090\n                                                                                                                      // 1091\n\t\trootEl.dispatchEvent(evt);                                                                                          // 1092\n                                                                                                                      // 1093\n\t\tif (options[onName]) {                                                                                              // 1094\n\t\t\toptions[onName].call(sortable, evt);                                                                               // 1095\n\t\t}                                                                                                                   // 1096\n\t}                                                                                                                    // 1097\n                                                                                                                      // 1098\n                                                                                                                      // 1099\n\tfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect) {                                             // 1100\n\t\tvar evt,                                                                                                            // 1101\n\t\t\tsortable = fromEl[expando],                                                                                        // 1102\n\t\t\tonMoveFn = sortable.options.onMove,                                                                                // 1103\n\t\t\tretVal;                                                                                                            // 1104\n                                                                                                                      // 1105\n\t\tevt = document.createEvent('Event');                                                                                // 1106\n\t\tevt.initEvent('move', true, true);                                                                                  // 1107\n                                                                                                                      // 1108\n\t\tevt.to = toEl;                                                                                                      // 1109\n\t\tevt.from = fromEl;                                                                                                  // 1110\n\t\tevt.dragged = dragEl;                                                                                               // 1111\n\t\tevt.draggedRect = dragRect;                                                                                         // 1112\n\t\tevt.related = targetEl || toEl;                                                                                     // 1113\n\t\tevt.relatedRect = targetRect || toEl.getBoundingClientRect();                                                       // 1114\n                                                                                                                      // 1115\n\t\tfromEl.dispatchEvent(evt);                                                                                          // 1116\n                                                                                                                      // 1117\n\t\tif (onMoveFn) {                                                                                                     // 1118\n\t\t\tretVal = onMoveFn.call(sortable, evt);                                                                             // 1119\n\t\t}                                                                                                                   // 1120\n                                                                                                                      // 1121\n\t\treturn retVal;                                                                                                      // 1122\n\t}                                                                                                                    // 1123\n                                                                                                                      // 1124\n                                                                                                                      // 1125\n\tfunction _disableDraggable(el) {                                                                                     // 1126\n\t\tel.draggable = false;                                                                                               // 1127\n\t}                                                                                                                    // 1128\n                                                                                                                      // 1129\n                                                                                                                      // 1130\n\tfunction _unsilent() {                                                                                               // 1131\n\t\t_silent = false;                                                                                                    // 1132\n\t}                                                                                                                    // 1133\n                                                                                                                      // 1134\n                                                                                                                      // 1135\n\t/** @returns {HTMLElement|false} */                                                                                  // 1136\n\tfunction _ghostIsLast(el, evt) {                                                                                     // 1137\n\t\tvar lastEl = el.lastElementChild,                                                                                   // 1138\n\t\t\t\trect = lastEl.getBoundingClientRect();                                                                            // 1139\n                                                                                                                      // 1140\n\t\treturn ((evt.clientY - (rect.top + rect.height) > 5) || (evt.clientX - (rect.right + rect.width) > 5)) && lastEl; // min delta\n\t}                                                                                                                    // 1142\n                                                                                                                      // 1143\n                                                                                                                      // 1144\n\t/**                                                                                                                  // 1145\n\t * Generate id                                                                                                       // 1146\n\t * @param   {HTMLElement} el                                                                                         // 1147\n\t * @returns {String}                                                                                                 // 1148\n\t * @private                                                                                                          // 1149\n\t */                                                                                                                  // 1150\n\tfunction _generateId(el) {                                                                                           // 1151\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,                                            // 1152\n\t\t\ti = str.length,                                                                                                    // 1153\n\t\t\tsum = 0;                                                                                                           // 1154\n                                                                                                                      // 1155\n\t\twhile (i--) {                                                                                                       // 1156\n\t\t\tsum += str.charCodeAt(i);                                                                                          // 1157\n\t\t}                                                                                                                   // 1158\n                                                                                                                      // 1159\n\t\treturn sum.toString(36);                                                                                            // 1160\n\t}                                                                                                                    // 1161\n                                                                                                                      // 1162\n\t/**                                                                                                                  // 1163\n\t * Returns the index of an element within its parent                                                                 // 1164\n\t * @param  {HTMLElement} el                                                                                          // 1165\n\t * @return {number}                                                                                                  // 1166\n\t */                                                                                                                  // 1167\n\tfunction _index(el) {                                                                                                // 1168\n\t\tvar index = 0;                                                                                                      // 1169\n                                                                                                                      // 1170\n\t\tif (!el || !el.parentNode) {                                                                                        // 1171\n\t\t\treturn -1;                                                                                                         // 1172\n\t\t}                                                                                                                   // 1173\n                                                                                                                      // 1174\n\t\twhile (el && (el = el.previousElementSibling)) {                                                                    // 1175\n\t\t\tif (el.nodeName.toUpperCase() !== 'TEMPLATE') {                                                                    // 1176\n\t\t\t\tindex++;                                                                                                          // 1177\n\t\t\t}                                                                                                                  // 1178\n\t\t}                                                                                                                   // 1179\n                                                                                                                      // 1180\n\t\treturn index;                                                                                                       // 1181\n\t}                                                                                                                    // 1182\n                                                                                                                      // 1183\n\tfunction _throttle(callback, ms) {                                                                                   // 1184\n\t\tvar args, _this;                                                                                                    // 1185\n                                                                                                                      // 1186\n\t\treturn function () {                                                                                                // 1187\n\t\t\tif (args === void 0) {                                                                                             // 1188\n\t\t\t\targs = arguments;                                                                                                 // 1189\n\t\t\t\t_this = this;                                                                                                     // 1190\n                                                                                                                      // 1191\n\t\t\t\tsetTimeout(function () {                                                                                          // 1192\n\t\t\t\t\tif (args.length === 1) {                                                                                         // 1193\n\t\t\t\t\t\tcallback.call(_this, args[0]);                                                                                  // 1194\n\t\t\t\t\t} else {                                                                                                         // 1195\n\t\t\t\t\t\tcallback.apply(_this, args);                                                                                    // 1196\n\t\t\t\t\t}                                                                                                                // 1197\n                                                                                                                      // 1198\n\t\t\t\t\targs = void 0;                                                                                                   // 1199\n\t\t\t\t}, ms);                                                                                                           // 1200\n\t\t\t}                                                                                                                  // 1201\n\t\t};                                                                                                                  // 1202\n\t}                                                                                                                    // 1203\n                                                                                                                      // 1204\n\tfunction _extend(dst, src) {                                                                                         // 1205\n\t\tif (dst && src) {                                                                                                   // 1206\n\t\t\tfor (var key in src) {                                                                                             // 1207\n\t\t\t\tif (src.hasOwnProperty(key)) {                                                                                    // 1208\n\t\t\t\t\tdst[key] = src[key];                                                                                             // 1209\n\t\t\t\t}                                                                                                                 // 1210\n\t\t\t}                                                                                                                  // 1211\n\t\t}                                                                                                                   // 1212\n                                                                                                                      // 1213\n\t\treturn dst;                                                                                                         // 1214\n\t}                                                                                                                    // 1215\n                                                                                                                      // 1216\n                                                                                                                      // 1217\n\t// Export utils                                                                                                      // 1218\n\tSortable.utils = {                                                                                                   // 1219\n\t\ton: _on,                                                                                                            // 1220\n\t\toff: _off,                                                                                                          // 1221\n\t\tcss: _css,                                                                                                          // 1222\n\t\tfind: _find,                                                                                                        // 1223\n\t\tis: function (el, selector) {                                                                                       // 1224\n\t\t\treturn !!_closest(el, selector, el);                                                                               // 1225\n\t\t},                                                                                                                  // 1226\n\t\textend: _extend,                                                                                                    // 1227\n\t\tthrottle: _throttle,                                                                                                // 1228\n\t\tclosest: _closest,                                                                                                  // 1229\n\t\ttoggleClass: _toggleClass,                                                                                          // 1230\n\t\tindex: _index                                                                                                       // 1231\n\t};                                                                                                                   // 1232\n                                                                                                                      // 1233\n                                                                                                                      // 1234\n\t/**                                                                                                                  // 1235\n\t * Create sortable instance                                                                                          // 1236\n\t * @param {HTMLElement}  el                                                                                          // 1237\n\t * @param {Object}      [options]                                                                                    // 1238\n\t */                                                                                                                  // 1239\n\tSortable.create = function (el, options) {                                                                           // 1240\n\t\treturn new Sortable(el, options);                                                                                   // 1241\n\t};                                                                                                                   // 1242\n                                                                                                                      // 1243\n                                                                                                                      // 1244\n\t// Export                                                                                                            // 1245\n\tSortable.version = '1.3.0';                                                                                          // 1246\n\treturn Sortable;                                                                                                     // 1247\n});                                                                                                                   // 1248\n                                                                                                                      // 1249\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rubaxa:sortable/template.template.js                                                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n                                                                                                                      // 1\nTemplate.__checkName(\"sortable\");                                                                                     // 2\nTemplate[\"sortable\"] = new Template(\"Template.sortable\", (function() {                                                // 3\n  var view = this;                                                                                                    // 4\n  return Blaze.Each(function() {                                                                                      // 5\n    return Spacebars.call(view.lookup(\"items\"));                                                                      // 6\n  }, function() {                                                                                                     // 7\n    return [ \"\\n\t\t\", Blaze._InOuterTemplateScope(view, function() {                                                   // 8\n      return Blaze._TemplateWith(function() {                                                                         // 9\n        return Spacebars.call(view.lookup(\".\"));                                                                      // 10\n      }, function() {                                                                                                 // 11\n        return Spacebars.include(function() {                                                                         // 12\n          return Spacebars.call(view.templateContentBlock);                                                           // 13\n        });                                                                                                           // 14\n      });                                                                                                             // 15\n    }), \"\\n\t\" ];                                                                                                      // 16\n  });                                                                                                                 // 17\n}));                                                                                                                  // 18\n                                                                                                                      // 19\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rubaxa:sortable/reactivize.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*                                                                                                                    // 1\nMake a Sortable reactive by binding it to a Mongo.Collection.                                                         // 2\nCalls `rubaxa:sortable/collection-update` on the server to update the sortField of affected records.                  // 3\n                                                                                                                      // 4\nTODO:                                                                                                                 // 5\n  * supply consecutive values if the `order` field doesn't have any                                                   // 6\n  * .get(DOMElement) - return the Sortable object of a DOMElement                                                     // 7\n  * create a new _id automatically onAdd if the event.from list had pull: 'clone'                                     // 8\n  * support arrays                                                                                                    // 9\n    * sparse arrays                                                                                                   // 10\n  * tests                                                                                                             // 11\n    * drop onto existing empty lists                                                                                  // 12\n    * insert back into lists emptied by dropping                                                                      // 13\n    * performance on dragging into long list at the beginning                                                         // 14\n  * handle failures on Collection operations, e.g. add callback to .insert                                            // 15\n  * when adding elements, update ranks just for the half closer to the start/end of the list                          // 16\n  * revisit http://programmers.stackexchange.com/questions/266451/maintain-ordered-collection-by-updating-as-few-order-fields-as-possible\n  * reproduce the insidious bug where the list isn't always sorted (fiddle with dragging #1 over #2, then back, then #N before #1)\n                                                                                                                      // 19\n */                                                                                                                   // 20\n                                                                                                                      // 21\n'use strict';                                                                                                         // 22\n                                                                                                                      // 23\nTemplate.sortable.created = function () {                                                                             // 24\n\tvar templateInstance = this;                                                                                         // 25\n\t// `this` is a template instance that can store properties of our choice - http://docs.meteor.com/#/full/template_inst\n\tif (templateInstance.setupDone) return;  // paranoid: only run setup once                                            // 27\n\t// this.data is the data context - http://docs.meteor.com/#/full/template_data                                       // 28\n\t// normalize all options into templateInstance.options, and remove them from .data                                   // 29\n\ttemplateInstance.options = templateInstance.data.options || {};                                                      // 30\n\tObject.keys(templateInstance.data).forEach(function (key) {                                                          // 31\n\t\tif (key === 'options' || key === 'items') return;                                                                   // 32\n\t\ttemplateInstance.options[key] = templateInstance.data[key];                                                         // 33\n\t\tdelete templateInstance.data[key];                                                                                  // 34\n\t});                                                                                                                  // 35\n\ttemplateInstance.options.sortField = templateInstance.options.sortField || 'order';                                  // 36\n\t// We can get the collection via the .collection property of the cursor, but changes made that way                   // 37\n\t// will NOT be sent to the server - https://github.com/meteor/meteor/issues/3271#issuecomment-66656257               // 38\n\t// Thus we need to use dburles:mongo-collection-instances to get a *real* collection                                 // 39\n\tif (templateInstance.data.items && templateInstance.data.items.collection) {                                         // 40\n\t\t// cursor passed via items=; its .collection works client-only and has a .name property                             // 41\n\t\ttemplateInstance.collectionName = templateInstance.data.items.collection.name;                                      // 42\n\t\ttemplateInstance.collection = Mongo.Collection.get(templateInstance.collectionName);                                // 43\n\t}\telse if (templateInstance.data.items) {                                                                            // 44\n\t\t// collection passed via items=; does NOT have a .name property, but _name                                          // 45\n\t\ttemplateInstance.collection = templateInstance.data.items;                                                          // 46\n\t\ttemplateInstance.collectionName = templateInstance.collection._name;                                                // 47\n\t}\telse if (templateInstance.data.collection) {                                                                       // 48\n\t  // cursor passed directly                                                                                          // 49\n\t\ttemplateInstance.collectionName = templateInstance.data.collection.name;                                            // 50\n\t\ttemplateInstance.collection = Mongo.Collection.get(templateInstance.collectionName);                                // 51\n\t} else {                                                                                                             // 52\n\t\ttemplateInstance.collection = templateInstance.data;  // collection passed directly                                 // 53\n\t\ttemplateInstance.collectionName = templateInstance.collection._name;                                                // 54\n\t}                                                                                                                    // 55\n                                                                                                                      // 56\n\t// TODO if (Array.isArray(templateInstance.collection))                                                              // 57\n                                                                                                                      // 58\n\t// What if user filters some of the items in the cursor, instead of ordering the entire collection?                  // 59\n\t// Use case: reorder by preference movies of a given genre, a filter within all movies.                              // 60\n\t// A: Modify all intervening items **that are on the client**, to preserve the overall order                         // 61\n\t// TODO: update *all* orders via a server method that takes not ids, but start & end elements - mild security risk   // 62\n\tdelete templateInstance.data.options;                                                                                // 63\n                                                                                                                      // 64\n\t/**                                                                                                                  // 65\n\t * When an element was moved, adjust its orders and possibly the order of                                            // 66\n\t * other elements, so as to maintain a consistent and correct order.                                                 // 67\n\t *                                                                                                                   // 68\n\t * There are three approaches to this:                                                                               // 69\n\t * 1) Using arbitrary precision arithmetic and setting only the order of the moved                                   // 70\n\t *    element to the average of the orders of the elements around it -                                               // 71\n\t *    http://programmers.stackexchange.com/questions/266451/maintain-ordered-collection-by-updating-as-few-order-fields-as-possible\n\t *    The downside is that the order field in the DB will increase by one byte every                                 // 73\n\t *    time an element is reordered.                                                                                  // 74\n\t * 2) Adjust the orders of the intervening items. This keeps the orders sane (integers)                              // 75\n\t *    but is slower because we have to modify multiple documents.                                                    // 76\n\t *    TODO: we may be able to update fewer records by only altering the                                              // 77\n\t *    order of the records between the newIndex/oldIndex and the start/end of the list.                              // 78\n\t * 3) Use regular precision arithmetic, but when the difference between the orders of the                            // 79\n\t *    moved item and the one before/after it falls below a certain threshold, adjust                                 // 80\n\t *    the order of that other item, and cascade doing so up or down the list.                                        // 81\n\t *    This will keep the `order` field constant in size, and will only occasionally                                  // 82\n\t *    require updating the `order` of other records.                                                                 // 83\n\t *                                                                                                                   // 84\n\t * For now, we use approach #2.                                                                                      // 85\n\t *                                                                                                                   // 86\n\t * @param {String} itemId - the _id of the item that was moved                                                       // 87\n\t * @param {Number} orderPrevItem - the order of the item before it, or null                                          // 88\n\t * @param {Number} orderNextItem - the order of the item after it, or null                                           // 89\n\t */                                                                                                                  // 90\n\ttemplateInstance.adjustOrders = function adjustOrders(itemId, orderPrevItem, orderNextItem) {                        // 91\n\t\tvar orderField = templateInstance.options.sortField;                                                                // 92\n\t\tvar selector = templateInstance.options.selector || {}, modifier = {$set: {}};                                      // 93\n\t\tvar ids = [];                                                                                                       // 94\n\t\tvar startOrder = templateInstance.collection.findOne(itemId)[orderField];                                           // 95\n\t\tif (orderPrevItem !== null) {                                                                                       // 96\n\t\t\t// Element has a previous sibling, therefore it was moved down in the list.                                        // 97\n\t\t\t// Decrease the order of intervening elements.                                                                     // 98\n\t\t\tselector[orderField] = {$lte: orderPrevItem, $gt: startOrder};                                                     // 99\n\t\t\tids = _.pluck(templateInstance.collection.find(selector, {fields: {_id: 1}}).fetch(), '_id');                      // 100\n\t\t\tMeteor.call('rubaxa:sortable/collection-update', templateInstance.collectionName, ids, orderField, -1);            // 101\n                                                                                                                      // 102\n\t\t\t// Set the order of the dropped element to the order of its predecessor, whose order was decreased                 // 103\n\t\t\tmodifier.$set[orderField] = orderPrevItem;                                                                         // 104\n\t\t} else {                                                                                                            // 105\n\t\t\t// element moved up the list, increase order of intervening elements                                               // 106\n\t\t\tselector[orderField] = {$gte: orderNextItem, $lt: startOrder};                                                     // 107\n\t\t\tids = _.pluck(templateInstance.collection.find(selector, {fields: {_id: 1}}).fetch(), '_id');                      // 108\n\t\t\tMeteor.call('rubaxa:sortable/collection-update', templateInstance.collectionName, ids, orderField, 1);             // 109\n                                                                                                                      // 110\n\t\t\t// Set the order of the dropped element to the order of its successor, whose order was increased                   // 111\n\t\t\tmodifier.$set[orderField] = orderNextItem;                                                                         // 112\n\t\t}                                                                                                                   // 113\n\t\ttemplateInstance.collection.update(itemId, modifier);                                                               // 114\n\t};                                                                                                                   // 115\n                                                                                                                      // 116\n\ttemplateInstance.setupDone = true;                                                                                   // 117\n};                                                                                                                    // 118\n                                                                                                                      // 119\n                                                                                                                      // 120\nTemplate.sortable.rendered = function () {                                                                            // 121\n  var templateInstance = this;                                                                                        // 122\n\tvar orderField = templateInstance.options.sortField;                                                                 // 123\n                                                                                                                      // 124\n\t// sorting was changed within the list                                                                               // 125\n\tvar optionsOnUpdate = templateInstance.options.onUpdate;                                                             // 126\n\ttemplateInstance.options.onUpdate = function sortableUpdate(/**Event*/event) {                                       // 127\n\t\tvar itemEl = event.item;  // dragged HTMLElement                                                                    // 128\n\t\tevent.data = Blaze.getData(itemEl);                                                                                 // 129\n\t\tif (event.newIndex < event.oldIndex) {                                                                              // 130\n\t\t\t// Element moved up in the list. The dropped element has a next sibling for sure.                                  // 131\n\t\t\tvar orderNextItem = Blaze.getData(itemEl.nextElementSibling)[orderField];                                          // 132\n\t\t\ttemplateInstance.adjustOrders(event.data._id, null, orderNextItem);                                                // 133\n\t\t} else if (event.newIndex > event.oldIndex) {                                                                       // 134\n\t\t\t// Element moved down in the list. The dropped element has a previous sibling for sure.                            // 135\n\t\t\tvar orderPrevItem = Blaze.getData(itemEl.previousElementSibling)[orderField];                                      // 136\n\t\t\ttemplateInstance.adjustOrders(event.data._id, orderPrevItem, null);                                                // 137\n\t\t} else {                                                                                                            // 138\n\t\t\t// do nothing - drag and drop in the same location                                                                 // 139\n\t\t}                                                                                                                   // 140\n\t\tif (optionsOnUpdate) optionsOnUpdate(event);                                                                        // 141\n\t};                                                                                                                   // 142\n                                                                                                                      // 143\n\t// element was added from another list                                                                               // 144\n\tvar optionsOnAdd = templateInstance.options.onAdd;                                                                   // 145\n\ttemplateInstance.options.onAdd = function sortableAdd(/**Event*/event) {                                             // 146\n\t\tvar itemEl = event.item;  // dragged HTMLElement                                                                    // 147\n\t\tevent.data = Blaze.getData(itemEl);                                                                                 // 148\n\t\t// let the user decorate the object with additional properties before insertion                                     // 149\n\t\tif (optionsOnAdd) optionsOnAdd(event);                                                                              // 150\n                                                                                                                      // 151\n\t\t// Insert the new element at the end of the list and move it where it was dropped.                                  // 152\n\t\t// We could insert it at the beginning, but that would lead to negative orders.                                     // 153\n\t\tvar sortSpecifier = {}; sortSpecifier[orderField] = -1;                                                             // 154\n\t\tevent.data.order = templateInstance.collection.findOne({}, { sort: sortSpecifier, limit: 1 }).order + 1;            // 155\n\t\t// TODO: this can obviously be optimized by setting the order directly as the arithmetic average, with the caveats described above\n\t\tvar newElementId = templateInstance.collection.insert(event.data);                                                  // 157\n\t\tevent.data._id = newElementId;                                                                                      // 158\n\t\tif (itemEl.nextElementSibling) {                                                                                    // 159\n\t\t\tvar orderNextItem = Blaze.getData(itemEl.nextElementSibling)[orderField];                                          // 160\n\t\t\ttemplateInstance.adjustOrders(newElementId, null, orderNextItem);                                                  // 161\n\t\t} else {                                                                                                            // 162\n\t\t\t// do nothing - inserted after the last element                                                                    // 163\n\t\t}                                                                                                                   // 164\n\t\t// remove the dropped HTMLElement from the list because we have inserted it in the collection, which will update the template\n\t\titemEl.parentElement.removeChild(itemEl);                                                                           // 166\n\t};                                                                                                                   // 167\n                                                                                                                      // 168\n\t// element was removed by dragging into another list                                                                 // 169\n\tvar optionsOnRemove = templateInstance.options.onRemove;                                                             // 170\n\ttemplateInstance.options.onRemove = function sortableRemove(/**Event*/event) {                                       // 171\n\t\tvar itemEl = event.item;  // dragged HTMLElement                                                                    // 172\n\t\tevent.data = Blaze.getData(itemEl);                                                                                 // 173\n\t\t// don't remove from the collection if group.pull is clone or false                                                 // 174\n\t\tif (typeof templateInstance.options.group === 'undefined'                                                           // 175\n\t\t\t\t|| typeof templateInstance.options.group.pull === 'undefined'                                                     // 176\n\t\t\t\t|| templateInstance.options.group.pull === true                                                                   // 177\n\t\t) templateInstance.collection.remove(event.data._id);                                                               // 178\n\t\tif (optionsOnRemove) optionsOnRemove(event);                                                                        // 179\n\t};                                                                                                                   // 180\n                                                                                                                      // 181\n\t// just compute the `data` context                                                                                   // 182\n\t['onStart', 'onEnd', 'onSort', 'onFilter'].forEach(function (eventHandler) {                                         // 183\n\t\tif (templateInstance.options[eventHandler]) {                                                                       // 184\n\t\t\tvar userEventHandler = templateInstance.options[eventHandler];                                                     // 185\n\t\t\ttemplateInstance.options[eventHandler] = function (/**Event*/event) {                                              // 186\n\t\t\t\tvar itemEl = event.item;  // dragged HTMLElement                                                                  // 187\n\t\t\t\tevent.data = Blaze.getData(itemEl);                                                                               // 188\n\t\t\t\tuserEventHandler(event);                                                                                          // 189\n\t\t\t};                                                                                                                 // 190\n\t\t}                                                                                                                   // 191\n\t});                                                                                                                  // 192\n                                                                                                                      // 193\n\ttemplateInstance.sortable = Sortable.create(templateInstance.firstNode.parentElement, templateInstance.options);     // 194\n\t// TODO make the object accessible, e.g. via Sortable.getSortableById() or some such                                 // 195\n};                                                                                                                    // 196\n                                                                                                                      // 197\n                                                                                                                      // 198\nTemplate.sortable.destroyed = function () {                                                                           // 199\n\tif(this.sortable) this.sortable.destroy();                                                                           // 200\n};                                                                                                                    // 201\n                                                                                                                      // 202\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/rubaxa:sortable/methods-client.js                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n'use strict';                                                                                                         // 1\n                                                                                                                      // 2\nMeteor.methods({                                                                                                      // 3\n\t/**                                                                                                                  // 4\n\t * Update the sortField of documents with given ids in a collection, incrementing it by incDec                       // 5\n\t * @param {String} collectionName - name of the collection to update                                                 // 6\n\t * @param {String[]} ids - array of document ids                                                                     // 7\n\t * @param {String} orderField - the name of the order field, usually \"order\"                                         // 8\n\t * @param {Number} incDec - pass 1 or -1                                                                             // 9\n\t */                                                                                                                  // 10\n\t'rubaxa:sortable/collection-update': function (collectionName, ids, sortField, incDec) {                             // 11\n\t\tvar selector = {_id: {$in: ids}}, modifier = {$inc: {}};                                                            // 12\n\t\tmodifier.$inc[sortField] = incDec;                                                                                  // 13\n\t\tMongo.Collection.get(collectionName).update(selector, modifier, {multi: true});                                     // 14\n\t}                                                                                                                    // 15\n});                                                                                                                   // 16\n                                                                                                                      // 17\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"rubaxa:sortable\", {\n  Sortable: Sortable\n});\n\n})();\n","servePath":"/packages/rubaxa_sortable.js"}]